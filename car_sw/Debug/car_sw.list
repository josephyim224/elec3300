
car_sw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003028  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08003134  08003134  00013134  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003160  08003160  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08003160  08003160  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003160  08003160  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003164  08003164  00013164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003168  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000025c  2000000c  08003174  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000268  08003174  00020268  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eb6c  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d68  00000000  00000000  0002eba1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001110  00000000  00000000  00030910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001040  00000000  00000000  00031a20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017eeb  00000000  00000000  00032a60  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c754  00000000  00000000  0004a94b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008f21d  00000000  00000000  0005709f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e62bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004940  00000000  00000000  000e6338  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	0800311c 	.word	0x0800311c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	0800311c 	.word	0x0800311c

0800014c <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000150:	f000 fe54 	bl	8000dfc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000154:	f000 f813 	bl	800017e <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000158:	f000 facc 	bl	80006f4 <MX_GPIO_Init>
	MX_ADC1_Init();
 800015c:	f000 f86a 	bl	8000234 <MX_ADC1_Init>
	MX_I2C1_Init();
 8000160:	f000 f8a6 	bl	80002b0 <MX_I2C1_Init>
	MX_SPI1_Init();
 8000164:	f000 f8d2 	bl	800030c <MX_SPI1_Init>
	MX_TIM1_Init();
 8000168:	f000 f908 	bl	800037c <MX_TIM1_Init>
	MX_USART2_UART_Init();
 800016c:	f000 fa98 	bl	80006a0 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 8000170:	f000 f9a0 	bl	80004b4 <MX_TIM2_Init>
	MX_TIM3_Init();
 8000174:	f000 f9ee 	bl	8000554 <MX_TIM3_Init>
	MX_TIM4_Init();
 8000178:	f000 fa40 	bl	80005fc <MX_TIM4_Init>

	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800017c:	e7fe      	b.n	800017c <main+0x30>

0800017e <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 800017e:	b580      	push	{r7, lr}
 8000180:	b094      	sub	sp, #80	; 0x50
 8000182:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000184:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000188:	2228      	movs	r2, #40	; 0x28
 800018a:	2100      	movs	r1, #0
 800018c:	4618      	mov	r0, r3
 800018e:	f002 ffbd 	bl	800310c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000192:	f107 0314 	add.w	r3, r7, #20
 8000196:	2200      	movs	r2, #0
 8000198:	601a      	str	r2, [r3, #0]
 800019a:	605a      	str	r2, [r3, #4]
 800019c:	609a      	str	r2, [r3, #8]
 800019e:	60da      	str	r2, [r3, #12]
 80001a0:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = { 0 };
 80001a2:	1d3b      	adds	r3, r7, #4
 80001a4:	2200      	movs	r2, #0
 80001a6:	601a      	str	r2, [r3, #0]
 80001a8:	605a      	str	r2, [r3, #4]
 80001aa:	609a      	str	r2, [r3, #8]
 80001ac:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001ae:	2301      	movs	r3, #1
 80001b0:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001b8:	2300      	movs	r3, #0
 80001ba:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001bc:	2301      	movs	r3, #1
 80001be:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c0:	2302      	movs	r3, #2
 80001c2:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001c8:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001ca:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001ce:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80001d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d4:	4618      	mov	r0, r3
 80001d6:	f001 fc0b 	bl	80019f0 <HAL_RCC_OscConfig>
 80001da:	4603      	mov	r3, r0
 80001dc:	2b00      	cmp	r3, #0
 80001de:	d001      	beq.n	80001e4 <SystemClock_Config+0x66>
		Error_Handler();
 80001e0:	f000 fb2a 	bl	8000838 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80001e4:	230f      	movs	r3, #15
 80001e6:	617b      	str	r3, [r7, #20]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001e8:	2302      	movs	r3, #2
 80001ea:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ec:	2300      	movs	r3, #0
 80001ee:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f4:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001f6:	2300      	movs	r3, #0
 80001f8:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80001fa:	f107 0314 	add.w	r3, r7, #20
 80001fe:	2102      	movs	r1, #2
 8000200:	4618      	mov	r0, r3
 8000202:	f001 fe75 	bl	8001ef0 <HAL_RCC_ClockConfig>
 8000206:	4603      	mov	r3, r0
 8000208:	2b00      	cmp	r3, #0
 800020a:	d001      	beq.n	8000210 <SystemClock_Config+0x92>
		Error_Handler();
 800020c:	f000 fb14 	bl	8000838 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000210:	2302      	movs	r3, #2
 8000212:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8000214:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000218:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK) {
 800021a:	1d3b      	adds	r3, r7, #4
 800021c:	4618      	mov	r0, r3
 800021e:	f002 f803 	bl	8002228 <HAL_RCCEx_PeriphCLKConfig>
 8000222:	4603      	mov	r3, r0
 8000224:	2b00      	cmp	r3, #0
 8000226:	d001      	beq.n	800022c <SystemClock_Config+0xae>
		Error_Handler();
 8000228:	f000 fb06 	bl	8000838 <Error_Handler>
	}
}
 800022c:	bf00      	nop
 800022e:	3750      	adds	r7, #80	; 0x50
 8000230:	46bd      	mov	sp, r7
 8000232:	bd80      	pop	{r7, pc}

08000234 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 800023a:	1d3b      	adds	r3, r7, #4
 800023c:	2200      	movs	r2, #0
 800023e:	601a      	str	r2, [r3, #0]
 8000240:	605a      	str	r2, [r3, #4]
 8000242:	609a      	str	r2, [r3, #8]
	/* USER CODE BEGIN ADC1_Init 1 */

	/* USER CODE END ADC1_Init 1 */
	/** Common config
	 */
	hadc1.Instance = ADC1;
 8000244:	4b18      	ldr	r3, [pc, #96]	; (80002a8 <MX_ADC1_Init+0x74>)
 8000246:	4a19      	ldr	r2, [pc, #100]	; (80002ac <MX_ADC1_Init+0x78>)
 8000248:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800024a:	4b17      	ldr	r3, [pc, #92]	; (80002a8 <MX_ADC1_Init+0x74>)
 800024c:	2200      	movs	r2, #0
 800024e:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8000250:	4b15      	ldr	r3, [pc, #84]	; (80002a8 <MX_ADC1_Init+0x74>)
 8000252:	2200      	movs	r2, #0
 8000254:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000256:	4b14      	ldr	r3, [pc, #80]	; (80002a8 <MX_ADC1_Init+0x74>)
 8000258:	2200      	movs	r2, #0
 800025a:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800025c:	4b12      	ldr	r3, [pc, #72]	; (80002a8 <MX_ADC1_Init+0x74>)
 800025e:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 8000262:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000264:	4b10      	ldr	r3, [pc, #64]	; (80002a8 <MX_ADC1_Init+0x74>)
 8000266:	2200      	movs	r2, #0
 8000268:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 1;
 800026a:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <MX_ADC1_Init+0x74>)
 800026c:	2201      	movs	r2, #1
 800026e:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000270:	480d      	ldr	r0, [pc, #52]	; (80002a8 <MX_ADC1_Init+0x74>)
 8000272:	f000 fe25 	bl	8000ec0 <HAL_ADC_Init>
 8000276:	4603      	mov	r3, r0
 8000278:	2b00      	cmp	r3, #0
 800027a:	d001      	beq.n	8000280 <MX_ADC1_Init+0x4c>
		Error_Handler();
 800027c:	f000 fadc 	bl	8000838 <Error_Handler>
	}
	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8000280:	2301      	movs	r3, #1
 8000282:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8000284:	2301      	movs	r3, #1
 8000286:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000288:	2300      	movs	r3, #0
 800028a:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	4619      	mov	r1, r3
 8000290:	4805      	ldr	r0, [pc, #20]	; (80002a8 <MX_ADC1_Init+0x74>)
 8000292:	f000 feed 	bl	8001070 <HAL_ADC_ConfigChannel>
 8000296:	4603      	mov	r3, r0
 8000298:	2b00      	cmp	r3, #0
 800029a:	d001      	beq.n	80002a0 <MX_ADC1_Init+0x6c>
		Error_Handler();
 800029c:	f000 facc 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 80002a0:	bf00      	nop
 80002a2:	3710      	adds	r7, #16
 80002a4:	46bd      	mov	sp, r7
 80002a6:	bd80      	pop	{r7, pc}
 80002a8:	2000010c 	.word	0x2000010c
 80002ac:	40012400 	.word	0x40012400

080002b0 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 80002b0:	b580      	push	{r7, lr}
 80002b2:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80002b4:	4b12      	ldr	r3, [pc, #72]	; (8000300 <MX_I2C1_Init+0x50>)
 80002b6:	4a13      	ldr	r2, [pc, #76]	; (8000304 <MX_I2C1_Init+0x54>)
 80002b8:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80002ba:	4b11      	ldr	r3, [pc, #68]	; (8000300 <MX_I2C1_Init+0x50>)
 80002bc:	4a12      	ldr	r2, [pc, #72]	; (8000308 <MX_I2C1_Init+0x58>)
 80002be:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80002c0:	4b0f      	ldr	r3, [pc, #60]	; (8000300 <MX_I2C1_Init+0x50>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80002c6:	4b0e      	ldr	r3, [pc, #56]	; (8000300 <MX_I2C1_Init+0x50>)
 80002c8:	2200      	movs	r2, #0
 80002ca:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <MX_I2C1_Init+0x50>)
 80002ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80002d2:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80002d4:	4b0a      	ldr	r3, [pc, #40]	; (8000300 <MX_I2C1_Init+0x50>)
 80002d6:	2200      	movs	r2, #0
 80002d8:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <MX_I2C1_Init+0x50>)
 80002dc:	2200      	movs	r2, #0
 80002de:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80002e0:	4b07      	ldr	r3, [pc, #28]	; (8000300 <MX_I2C1_Init+0x50>)
 80002e2:	2200      	movs	r2, #0
 80002e4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80002e6:	4b06      	ldr	r3, [pc, #24]	; (8000300 <MX_I2C1_Init+0x50>)
 80002e8:	2200      	movs	r2, #0
 80002ea:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80002ec:	4804      	ldr	r0, [pc, #16]	; (8000300 <MX_I2C1_Init+0x50>)
 80002ee:	f001 fa47 	bl	8001780 <HAL_I2C_Init>
 80002f2:	4603      	mov	r3, r0
 80002f4:	2b00      	cmp	r3, #0
 80002f6:	d001      	beq.n	80002fc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80002f8:	f000 fa9e 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80002fc:	bf00      	nop
 80002fe:	bd80      	pop	{r7, pc}
 8000300:	20000070 	.word	0x20000070
 8000304:	40005400 	.word	0x40005400
 8000308:	000186a0 	.word	0x000186a0

0800030c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800030c:	b580      	push	{r7, lr}
 800030e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8000310:	4b18      	ldr	r3, [pc, #96]	; (8000374 <MX_SPI1_Init+0x68>)
 8000312:	4a19      	ldr	r2, [pc, #100]	; (8000378 <MX_SPI1_Init+0x6c>)
 8000314:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8000316:	4b17      	ldr	r3, [pc, #92]	; (8000374 <MX_SPI1_Init+0x68>)
 8000318:	f44f 7282 	mov.w	r2, #260	; 0x104
 800031c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 800031e:	4b15      	ldr	r3, [pc, #84]	; (8000374 <MX_SPI1_Init+0x68>)
 8000320:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000324:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000326:	4b13      	ldr	r3, [pc, #76]	; (8000374 <MX_SPI1_Init+0x68>)
 8000328:	2200      	movs	r2, #0
 800032a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800032c:	4b11      	ldr	r3, [pc, #68]	; (8000374 <MX_SPI1_Init+0x68>)
 800032e:	2200      	movs	r2, #0
 8000330:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000332:	4b10      	ldr	r3, [pc, #64]	; (8000374 <MX_SPI1_Init+0x68>)
 8000334:	2200      	movs	r2, #0
 8000336:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8000338:	4b0e      	ldr	r3, [pc, #56]	; (8000374 <MX_SPI1_Init+0x68>)
 800033a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800033e:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000340:	4b0c      	ldr	r3, [pc, #48]	; (8000374 <MX_SPI1_Init+0x68>)
 8000342:	2208      	movs	r2, #8
 8000344:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000346:	4b0b      	ldr	r3, [pc, #44]	; (8000374 <MX_SPI1_Init+0x68>)
 8000348:	2200      	movs	r2, #0
 800034a:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800034c:	4b09      	ldr	r3, [pc, #36]	; (8000374 <MX_SPI1_Init+0x68>)
 800034e:	2200      	movs	r2, #0
 8000350:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000352:	4b08      	ldr	r3, [pc, #32]	; (8000374 <MX_SPI1_Init+0x68>)
 8000354:	2200      	movs	r2, #0
 8000356:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8000358:	4b06      	ldr	r3, [pc, #24]	; (8000374 <MX_SPI1_Init+0x68>)
 800035a:	220a      	movs	r2, #10
 800035c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 800035e:	4805      	ldr	r0, [pc, #20]	; (8000374 <MX_SPI1_Init+0x68>)
 8000360:	f002 f818 	bl	8002394 <HAL_SPI_Init>
 8000364:	4603      	mov	r3, r0
 8000366:	2b00      	cmp	r3, #0
 8000368:	d001      	beq.n	800036e <MX_SPI1_Init+0x62>
		Error_Handler();
 800036a:	f000 fa65 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 800036e:	bf00      	nop
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	20000184 	.word	0x20000184
 8000378:	40013000 	.word	0x40013000

0800037c <MX_TIM1_Init>:
/**
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void) {
 800037c:	b580      	push	{r7, lr}
 800037e:	b092      	sub	sp, #72	; 0x48
 8000380:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000382:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000386:	2200      	movs	r2, #0
 8000388:	601a      	str	r2, [r3, #0]
 800038a:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800038c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000390:	2200      	movs	r2, #0
 8000392:	601a      	str	r2, [r3, #0]
 8000394:	605a      	str	r2, [r3, #4]
 8000396:	609a      	str	r2, [r3, #8]
 8000398:	60da      	str	r2, [r3, #12]
 800039a:	611a      	str	r2, [r3, #16]
 800039c:	615a      	str	r2, [r3, #20]
 800039e:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 80003a0:	1d3b      	adds	r3, r7, #4
 80003a2:	2220      	movs	r2, #32
 80003a4:	2100      	movs	r1, #0
 80003a6:	4618      	mov	r0, r3
 80003a8:	f002 feb0 	bl	800310c <memset>

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80003ac:	4b3f      	ldr	r3, [pc, #252]	; (80004ac <MX_TIM1_Init+0x130>)
 80003ae:	4a40      	ldr	r2, [pc, #256]	; (80004b0 <MX_TIM1_Init+0x134>)
 80003b0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80003b2:	4b3e      	ldr	r3, [pc, #248]	; (80004ac <MX_TIM1_Init+0x130>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80003b8:	4b3c      	ldr	r3, [pc, #240]	; (80004ac <MX_TIM1_Init+0x130>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 65535;
 80003be:	4b3b      	ldr	r3, [pc, #236]	; (80004ac <MX_TIM1_Init+0x130>)
 80003c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003c4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80003c6:	4b39      	ldr	r3, [pc, #228]	; (80004ac <MX_TIM1_Init+0x130>)
 80003c8:	2200      	movs	r2, #0
 80003ca:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80003cc:	4b37      	ldr	r3, [pc, #220]	; (80004ac <MX_TIM1_Init+0x130>)
 80003ce:	2200      	movs	r2, #0
 80003d0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003d2:	4b36      	ldr	r3, [pc, #216]	; (80004ac <MX_TIM1_Init+0x130>)
 80003d4:	2200      	movs	r2, #0
 80003d6:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_PWM_Init(&htim1) != HAL_OK) {
 80003d8:	4834      	ldr	r0, [pc, #208]	; (80004ac <MX_TIM1_Init+0x130>)
 80003da:	f002 f8ae 	bl	800253a <HAL_TIM_PWM_Init>
 80003de:	4603      	mov	r3, r0
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d001      	beq.n	80003e8 <MX_TIM1_Init+0x6c>
		Error_Handler();
 80003e4:	f000 fa28 	bl	8000838 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003e8:	2300      	movs	r3, #0
 80003ea:	643b      	str	r3, [r7, #64]	; 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig)
 80003f0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80003f4:	4619      	mov	r1, r3
 80003f6:	482d      	ldr	r0, [pc, #180]	; (80004ac <MX_TIM1_Init+0x130>)
 80003f8:	f002 fcda 	bl	8002db0 <HAL_TIMEx_MasterConfigSynchronization>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM1_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000402:	f000 fa19 	bl	8000838 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000406:	2360      	movs	r3, #96	; 0x60
 8000408:	627b      	str	r3, [r7, #36]	; 0x24
	sConfigOC.Pulse = 0;
 800040a:	2300      	movs	r3, #0
 800040c:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800040e:	2300      	movs	r3, #0
 8000410:	62fb      	str	r3, [r7, #44]	; 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000412:	2300      	movs	r3, #0
 8000414:	633b      	str	r3, [r7, #48]	; 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000416:	2300      	movs	r3, #0
 8000418:	637b      	str	r3, [r7, #52]	; 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800041a:	2300      	movs	r3, #0
 800041c:	63bb      	str	r3, [r7, #56]	; 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800041e:	2300      	movs	r3, #0
 8000420:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1)
 8000422:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000426:	2200      	movs	r2, #0
 8000428:	4619      	mov	r1, r3
 800042a:	4820      	ldr	r0, [pc, #128]	; (80004ac <MX_TIM1_Init+0x130>)
 800042c:	f002 f8d4 	bl	80025d8 <HAL_TIM_PWM_ConfigChannel>
 8000430:	4603      	mov	r3, r0
 8000432:	2b00      	cmp	r3, #0
 8000434:	d001      	beq.n	800043a <MX_TIM1_Init+0xbe>
			!= HAL_OK) {
		Error_Handler();
 8000436:	f000 f9ff 	bl	8000838 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2)
 800043a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800043e:	2204      	movs	r2, #4
 8000440:	4619      	mov	r1, r3
 8000442:	481a      	ldr	r0, [pc, #104]	; (80004ac <MX_TIM1_Init+0x130>)
 8000444:	f002 f8c8 	bl	80025d8 <HAL_TIM_PWM_ConfigChannel>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_TIM1_Init+0xd6>
			!= HAL_OK) {
		Error_Handler();
 800044e:	f000 f9f3 	bl	8000838 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3)
 8000452:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000456:	2208      	movs	r2, #8
 8000458:	4619      	mov	r1, r3
 800045a:	4814      	ldr	r0, [pc, #80]	; (80004ac <MX_TIM1_Init+0x130>)
 800045c:	f002 f8bc 	bl	80025d8 <HAL_TIM_PWM_ConfigChannel>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0xee>
			!= HAL_OK) {
		Error_Handler();
 8000466:	f000 f9e7 	bl	8000838 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800046a:	2300      	movs	r3, #0
 800046c:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800046e:	2300      	movs	r3, #0
 8000470:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000472:	2300      	movs	r3, #0
 8000474:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 8000476:	2300      	movs	r3, #0
 8000478:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800047a:	2300      	movs	r3, #0
 800047c:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800047e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000482:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig)
 8000488:	1d3b      	adds	r3, r7, #4
 800048a:	4619      	mov	r1, r3
 800048c:	4807      	ldr	r0, [pc, #28]	; (80004ac <MX_TIM1_Init+0x130>)
 800048e:	f002 fced 	bl	8002e6c <HAL_TIMEx_ConfigBreakDeadTime>
 8000492:	4603      	mov	r3, r0
 8000494:	2b00      	cmp	r3, #0
 8000496:	d001      	beq.n	800049c <MX_TIM1_Init+0x120>
			!= HAL_OK) {
		Error_Handler();
 8000498:	f000 f9ce 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */
	HAL_TIM_MspPostInit(&htim1);
 800049c:	4803      	ldr	r0, [pc, #12]	; (80004ac <MX_TIM1_Init+0x130>)
 800049e:	f000 fbcf 	bl	8000c40 <HAL_TIM_MspPostInit>

}
 80004a2:	bf00      	nop
 80004a4:	3748      	adds	r7, #72	; 0x48
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	2000013c 	.word	0x2000013c
 80004b0:	40012c00 	.word	0x40012c00

080004b4 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b088      	sub	sp, #32
 80004b8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 80004ba:	f107 030c 	add.w	r3, r7, #12
 80004be:	2200      	movs	r2, #0
 80004c0:	601a      	str	r2, [r3, #0]
 80004c2:	605a      	str	r2, [r3, #4]
 80004c4:	609a      	str	r2, [r3, #8]
 80004c6:	60da      	str	r2, [r3, #12]
 80004c8:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	601a      	str	r2, [r3, #0]
 80004d0:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 80004d2:	4b1f      	ldr	r3, [pc, #124]	; (8000550 <MX_TIM2_Init+0x9c>)
 80004d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80004d8:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 0;
 80004da:	4b1d      	ldr	r3, [pc, #116]	; (8000550 <MX_TIM2_Init+0x9c>)
 80004dc:	2200      	movs	r2, #0
 80004de:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80004e0:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <MX_TIM2_Init+0x9c>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 80004e6:	4b1a      	ldr	r3, [pc, #104]	; (8000550 <MX_TIM2_Init+0x9c>)
 80004e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80004ec:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80004ee:	4b18      	ldr	r3, [pc, #96]	; (8000550 <MX_TIM2_Init+0x9c>)
 80004f0:	2200      	movs	r2, #0
 80004f2:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80004f4:	4b16      	ldr	r3, [pc, #88]	; (8000550 <MX_TIM2_Init+0x9c>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80004fa:	4815      	ldr	r0, [pc, #84]	; (8000550 <MX_TIM2_Init+0x9c>)
 80004fc:	f001 ffce 	bl	800249c <HAL_TIM_Base_Init>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <MX_TIM2_Init+0x56>
		Error_Handler();
 8000506:	f000 f997 	bl	8000838 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 800050a:	2300      	movs	r3, #0
 800050c:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 800050e:	2340      	movs	r3, #64	; 0x40
 8000510:	613b      	str	r3, [r7, #16]
	sSlaveConfig.TriggerFilter = 0;
 8000512:	2300      	movs	r3, #0
 8000514:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK) {
 8000516:	f107 030c 	add.w	r3, r7, #12
 800051a:	4619      	mov	r1, r3
 800051c:	480c      	ldr	r0, [pc, #48]	; (8000550 <MX_TIM2_Init+0x9c>)
 800051e:	f002 f919 	bl	8002754 <HAL_TIM_SlaveConfigSynchro>
 8000522:	4603      	mov	r3, r0
 8000524:	2b00      	cmp	r3, #0
 8000526:	d001      	beq.n	800052c <MX_TIM2_Init+0x78>
		Error_Handler();
 8000528:	f000 f986 	bl	8000838 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800052c:	2300      	movs	r3, #0
 800052e:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000530:	2300      	movs	r3, #0
 8000532:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000534:	1d3b      	adds	r3, r7, #4
 8000536:	4619      	mov	r1, r3
 8000538:	4805      	ldr	r0, [pc, #20]	; (8000550 <MX_TIM2_Init+0x9c>)
 800053a:	f002 fc39 	bl	8002db0 <HAL_TIMEx_MasterConfigSynchronization>
 800053e:	4603      	mov	r3, r0
 8000540:	2b00      	cmp	r3, #0
 8000542:	d001      	beq.n	8000548 <MX_TIM2_Init+0x94>
			!= HAL_OK) {
		Error_Handler();
 8000544:	f000 f978 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000548:	bf00      	nop
 800054a:	3720      	adds	r7, #32
 800054c:	46bd      	mov	sp, r7
 800054e:	bd80      	pop	{r7, pc}
 8000550:	200001dc 	.word	0x200001dc

08000554 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000554:	b580      	push	{r7, lr}
 8000556:	b088      	sub	sp, #32
 8000558:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 800055a:	f107 030c 	add.w	r3, r7, #12
 800055e:	2200      	movs	r2, #0
 8000560:	601a      	str	r2, [r3, #0]
 8000562:	605a      	str	r2, [r3, #4]
 8000564:	609a      	str	r2, [r3, #8]
 8000566:	60da      	str	r2, [r3, #12]
 8000568:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000572:	4b20      	ldr	r3, [pc, #128]	; (80005f4 <MX_TIM3_Init+0xa0>)
 8000574:	4a20      	ldr	r2, [pc, #128]	; (80005f8 <MX_TIM3_Init+0xa4>)
 8000576:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000578:	4b1e      	ldr	r3, [pc, #120]	; (80005f4 <MX_TIM3_Init+0xa0>)
 800057a:	2200      	movs	r2, #0
 800057c:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800057e:	4b1d      	ldr	r3, [pc, #116]	; (80005f4 <MX_TIM3_Init+0xa0>)
 8000580:	2200      	movs	r2, #0
 8000582:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000584:	4b1b      	ldr	r3, [pc, #108]	; (80005f4 <MX_TIM3_Init+0xa0>)
 8000586:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800058a:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800058c:	4b19      	ldr	r3, [pc, #100]	; (80005f4 <MX_TIM3_Init+0xa0>)
 800058e:	2200      	movs	r2, #0
 8000590:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000592:	4b18      	ldr	r3, [pc, #96]	; (80005f4 <MX_TIM3_Init+0xa0>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8000598:	4816      	ldr	r0, [pc, #88]	; (80005f4 <MX_TIM3_Init+0xa0>)
 800059a:	f001 ff7f 	bl	800249c <HAL_TIM_Base_Init>
 800059e:	4603      	mov	r3, r0
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d001      	beq.n	80005a8 <MX_TIM3_Init+0x54>
		Error_Handler();
 80005a4:	f000 f948 	bl	8000838 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80005a8:	2307      	movs	r3, #7
 80005aa:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_TI1FP1;
 80005ac:	2350      	movs	r3, #80	; 0x50
 80005ae:	613b      	str	r3, [r7, #16]
	sSlaveConfig.TriggerPolarity = TIM_TRIGGERPOLARITY_RISING;
 80005b0:	2300      	movs	r3, #0
 80005b2:	617b      	str	r3, [r7, #20]
	sSlaveConfig.TriggerFilter = 0;
 80005b4:	2300      	movs	r3, #0
 80005b6:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK) {
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	4619      	mov	r1, r3
 80005be:	480d      	ldr	r0, [pc, #52]	; (80005f4 <MX_TIM3_Init+0xa0>)
 80005c0:	f002 f8c8 	bl	8002754 <HAL_TIM_SlaveConfigSynchro>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM3_Init+0x7a>
		Error_Handler();
 80005ca:	f000 f935 	bl	8000838 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ce:	2300      	movs	r3, #0
 80005d0:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 80005d6:	1d3b      	adds	r3, r7, #4
 80005d8:	4619      	mov	r1, r3
 80005da:	4806      	ldr	r0, [pc, #24]	; (80005f4 <MX_TIM3_Init+0xa0>)
 80005dc:	f002 fbe8 	bl	8002db0 <HAL_TIMEx_MasterConfigSynchronization>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <MX_TIM3_Init+0x96>
			!= HAL_OK) {
		Error_Handler();
 80005e6:	f000 f927 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 80005ea:	bf00      	nop
 80005ec:	3720      	adds	r7, #32
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	200000c4 	.word	0x200000c4
 80005f8:	40000400 	.word	0x40000400

080005fc <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b088      	sub	sp, #32
 8000600:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_SlaveConfigTypeDef sSlaveConfig = { 0 };
 8000602:	f107 030c 	add.w	r3, r7, #12
 8000606:	2200      	movs	r2, #0
 8000608:	601a      	str	r2, [r3, #0]
 800060a:	605a      	str	r2, [r3, #4]
 800060c:	609a      	str	r2, [r3, #8]
 800060e:	60da      	str	r2, [r3, #12]
 8000610:	611a      	str	r2, [r3, #16]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000612:	1d3b      	adds	r3, r7, #4
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800061a:	4b1f      	ldr	r3, [pc, #124]	; (8000698 <MX_TIM4_Init+0x9c>)
 800061c:	4a1f      	ldr	r2, [pc, #124]	; (800069c <MX_TIM4_Init+0xa0>)
 800061e:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8000620:	4b1d      	ldr	r3, [pc, #116]	; (8000698 <MX_TIM4_Init+0x9c>)
 8000622:	2200      	movs	r2, #0
 8000624:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000626:	4b1c      	ldr	r3, [pc, #112]	; (8000698 <MX_TIM4_Init+0x9c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 800062c:	4b1a      	ldr	r3, [pc, #104]	; (8000698 <MX_TIM4_Init+0x9c>)
 800062e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000632:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000634:	4b18      	ldr	r3, [pc, #96]	; (8000698 <MX_TIM4_Init+0x9c>)
 8000636:	2200      	movs	r2, #0
 8000638:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800063a:	4b17      	ldr	r3, [pc, #92]	; (8000698 <MX_TIM4_Init+0x9c>)
 800063c:	2200      	movs	r2, #0
 800063e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000640:	4815      	ldr	r0, [pc, #84]	; (8000698 <MX_TIM4_Init+0x9c>)
 8000642:	f001 ff2b 	bl	800249c <HAL_TIM_Base_Init>
 8000646:	4603      	mov	r3, r0
 8000648:	2b00      	cmp	r3, #0
 800064a:	d001      	beq.n	8000650 <MX_TIM4_Init+0x54>
		Error_Handler();
 800064c:	f000 f8f4 	bl	8000838 <Error_Handler>
	}
	sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8000650:	2300      	movs	r3, #0
 8000652:	60fb      	str	r3, [r7, #12]
	sSlaveConfig.InputTrigger = TIM_TS_TI1F_ED;
 8000654:	2340      	movs	r3, #64	; 0x40
 8000656:	613b      	str	r3, [r7, #16]
	sSlaveConfig.TriggerFilter = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]
	if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK) {
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	4619      	mov	r1, r3
 8000662:	480d      	ldr	r0, [pc, #52]	; (8000698 <MX_TIM4_Init+0x9c>)
 8000664:	f002 f876 	bl	8002754 <HAL_TIM_SlaveConfigSynchro>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <MX_TIM4_Init+0x76>
		Error_Handler();
 800066e:	f000 f8e3 	bl	8000838 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000676:	2300      	movs	r3, #0
 8000678:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	4619      	mov	r1, r3
 800067e:	4806      	ldr	r0, [pc, #24]	; (8000698 <MX_TIM4_Init+0x9c>)
 8000680:	f002 fb96 	bl	8002db0 <HAL_TIMEx_MasterConfigSynchronization>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <MX_TIM4_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 800068a:	f000 f8d5 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 800068e:	bf00      	nop
 8000690:	3720      	adds	r7, #32
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	20000028 	.word	0x20000028
 800069c:	40000800 	.word	0x40000800

080006a0 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART2_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART2_UART_Init+0x4c>)
 80006d8:	f002 fc19 	bl	8002f0e <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80006e2:	f000 f8a9 	bl	8000838 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000224 	.word	0x20000224
 80006f0:	40004400 	.word	0x40004400

080006f4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b088      	sub	sp, #32
 80006f8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006fa:	f107 0310 	add.w	r3, r7, #16
 80006fe:	2200      	movs	r2, #0
 8000700:	601a      	str	r2, [r3, #0]
 8000702:	605a      	str	r2, [r3, #4]
 8000704:	609a      	str	r2, [r3, #8]
 8000706:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000708:	4b47      	ldr	r3, [pc, #284]	; (8000828 <MX_GPIO_Init+0x134>)
 800070a:	699b      	ldr	r3, [r3, #24]
 800070c:	4a46      	ldr	r2, [pc, #280]	; (8000828 <MX_GPIO_Init+0x134>)
 800070e:	f043 0310 	orr.w	r3, r3, #16
 8000712:	6193      	str	r3, [r2, #24]
 8000714:	4b44      	ldr	r3, [pc, #272]	; (8000828 <MX_GPIO_Init+0x134>)
 8000716:	699b      	ldr	r3, [r3, #24]
 8000718:	f003 0310 	and.w	r3, r3, #16
 800071c:	60fb      	str	r3, [r7, #12]
 800071e:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000720:	4b41      	ldr	r3, [pc, #260]	; (8000828 <MX_GPIO_Init+0x134>)
 8000722:	699b      	ldr	r3, [r3, #24]
 8000724:	4a40      	ldr	r2, [pc, #256]	; (8000828 <MX_GPIO_Init+0x134>)
 8000726:	f043 0320 	orr.w	r3, r3, #32
 800072a:	6193      	str	r3, [r2, #24]
 800072c:	4b3e      	ldr	r3, [pc, #248]	; (8000828 <MX_GPIO_Init+0x134>)
 800072e:	699b      	ldr	r3, [r3, #24]
 8000730:	f003 0320 	and.w	r3, r3, #32
 8000734:	60bb      	str	r3, [r7, #8]
 8000736:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000738:	4b3b      	ldr	r3, [pc, #236]	; (8000828 <MX_GPIO_Init+0x134>)
 800073a:	699b      	ldr	r3, [r3, #24]
 800073c:	4a3a      	ldr	r2, [pc, #232]	; (8000828 <MX_GPIO_Init+0x134>)
 800073e:	f043 0304 	orr.w	r3, r3, #4
 8000742:	6193      	str	r3, [r2, #24]
 8000744:	4b38      	ldr	r3, [pc, #224]	; (8000828 <MX_GPIO_Init+0x134>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	f003 0304 	and.w	r3, r3, #4
 800074c:	607b      	str	r3, [r7, #4]
 800074e:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000750:	4b35      	ldr	r3, [pc, #212]	; (8000828 <MX_GPIO_Init+0x134>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	4a34      	ldr	r2, [pc, #208]	; (8000828 <MX_GPIO_Init+0x134>)
 8000756:	f043 0308 	orr.w	r3, r3, #8
 800075a:	6193      	str	r3, [r2, #24]
 800075c:	4b32      	ldr	r3, [pc, #200]	; (8000828 <MX_GPIO_Init+0x134>)
 800075e:	699b      	ldr	r3, [r3, #24]
 8000760:	f003 0308 	and.w	r3, r3, #8
 8000764:	603b      	str	r3, [r7, #0]
 8000766:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LED2_Pin | LED1_Pin | LED0_Pin, GPIO_PIN_RESET);
 8000768:	2200      	movs	r2, #0
 800076a:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 800076e:	482f      	ldr	r0, [pc, #188]	; (800082c <MX_GPIO_Init+0x138>)
 8000770:	f000 ffee 	bl	8001750 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8000774:	2200      	movs	r2, #0
 8000776:	f24f 0180 	movw	r1, #61568	; 0xf080
 800077a:	482d      	ldr	r0, [pc, #180]	; (8000830 <MX_GPIO_Init+0x13c>)
 800077c:	f000 ffe8 	bl	8001750 <HAL_GPIO_WritePin>
			M_MODE1_Pin | M_nSLEEP_Pin | M1_ENABLE_Pin | M2_ENABLE_Pin
					| LED3_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, M0_ENABLE_Pin | M_MODE0_Pin, GPIO_PIN_RESET);
 8000780:	2200      	movs	r2, #0
 8000782:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8000786:	482b      	ldr	r0, [pc, #172]	; (8000834 <MX_GPIO_Init+0x140>)
 8000788:	f000 ffe2 	bl	8001750 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED2_Pin LED1_Pin LED0_Pin */
	GPIO_InitStruct.Pin = LED2_Pin | LED1_Pin | LED0_Pin;
 800078c:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000790:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000792:	2301      	movs	r3, #1
 8000794:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000796:	2302      	movs	r3, #2
 8000798:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800079e:	f107 0310 	add.w	r3, r7, #16
 80007a2:	4619      	mov	r1, r3
 80007a4:	4821      	ldr	r0, [pc, #132]	; (800082c <MX_GPIO_Init+0x138>)
 80007a6:	f000 fe79 	bl	800149c <HAL_GPIO_Init>

	/*Configure GPIO pins : M1_nFAULT_Pin M2_nFAULT_Pin M0_nFAULT_Pin */
	GPIO_InitStruct.Pin = M1_nFAULT_Pin | M2_nFAULT_Pin | M0_nFAULT_Pin;
 80007aa:	f640 4304 	movw	r3, #3076	; 0xc04
 80007ae:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b0:	2300      	movs	r3, #0
 80007b2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b4:	2301      	movs	r3, #1
 80007b6:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0310 	add.w	r3, r7, #16
 80007bc:	4619      	mov	r1, r3
 80007be:	481c      	ldr	r0, [pc, #112]	; (8000830 <MX_GPIO_Init+0x13c>)
 80007c0:	f000 fe6c 	bl	800149c <HAL_GPIO_Init>

	/*Configure GPIO pins : M_MODE1_Pin M1_ENABLE_Pin M2_ENABLE_Pin LED3_Pin */
	GPIO_InitStruct.Pin =
 80007c4:	f24d 0380 	movw	r3, #53376	; 0xd080
 80007c8:	613b      	str	r3, [r7, #16]
			M_MODE1_Pin | M1_ENABLE_Pin | M2_ENABLE_Pin | LED3_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ca:	2301      	movs	r3, #1
 80007cc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80007ce:	2302      	movs	r3, #2
 80007d0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007d2:	2303      	movs	r3, #3
 80007d4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d6:	f107 0310 	add.w	r3, r7, #16
 80007da:	4619      	mov	r1, r3
 80007dc:	4814      	ldr	r0, [pc, #80]	; (8000830 <MX_GPIO_Init+0x13c>)
 80007de:	f000 fe5d 	bl	800149c <HAL_GPIO_Init>

	/*Configure GPIO pin : M_nSLEEP_Pin */
	GPIO_InitStruct.Pin = M_nSLEEP_Pin;
 80007e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007e6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007e8:	2301      	movs	r3, #1
 80007ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80007f0:	2303      	movs	r3, #3
 80007f2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(M_nSLEEP_GPIO_Port, &GPIO_InitStruct);
 80007f4:	f107 0310 	add.w	r3, r7, #16
 80007f8:	4619      	mov	r1, r3
 80007fa:	480d      	ldr	r0, [pc, #52]	; (8000830 <MX_GPIO_Init+0x13c>)
 80007fc:	f000 fe4e 	bl	800149c <HAL_GPIO_Init>

	/*Configure GPIO pins : M0_ENABLE_Pin M_MODE0_Pin */
	GPIO_InitStruct.Pin = M0_ENABLE_Pin | M_MODE0_Pin;
 8000800:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000804:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000806:	2301      	movs	r3, #1
 8000808:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800080a:	2302      	movs	r3, #2
 800080c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800080e:	2303      	movs	r3, #3
 8000810:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000812:	f107 0310 	add.w	r3, r7, #16
 8000816:	4619      	mov	r1, r3
 8000818:	4806      	ldr	r0, [pc, #24]	; (8000834 <MX_GPIO_Init+0x140>)
 800081a:	f000 fe3f 	bl	800149c <HAL_GPIO_Init>

}
 800081e:	bf00      	nop
 8000820:	3720      	adds	r7, #32
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	40021000 	.word	0x40021000
 800082c:	40011000 	.word	0x40011000
 8000830:	40010c00 	.word	0x40010c00
 8000834:	40010800 	.word	0x40010800

08000838 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800083c:	b672      	cpsid	i
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800083e:	e7fe      	b.n	800083e <Error_Handler+0x6>

08000840 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000846:	4b15      	ldr	r3, [pc, #84]	; (800089c <HAL_MspInit+0x5c>)
 8000848:	699b      	ldr	r3, [r3, #24]
 800084a:	4a14      	ldr	r2, [pc, #80]	; (800089c <HAL_MspInit+0x5c>)
 800084c:	f043 0301 	orr.w	r3, r3, #1
 8000850:	6193      	str	r3, [r2, #24]
 8000852:	4b12      	ldr	r3, [pc, #72]	; (800089c <HAL_MspInit+0x5c>)
 8000854:	699b      	ldr	r3, [r3, #24]
 8000856:	f003 0301 	and.w	r3, r3, #1
 800085a:	60bb      	str	r3, [r7, #8]
 800085c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085e:	4b0f      	ldr	r3, [pc, #60]	; (800089c <HAL_MspInit+0x5c>)
 8000860:	69db      	ldr	r3, [r3, #28]
 8000862:	4a0e      	ldr	r2, [pc, #56]	; (800089c <HAL_MspInit+0x5c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	61d3      	str	r3, [r2, #28]
 800086a:	4b0c      	ldr	r3, [pc, #48]	; (800089c <HAL_MspInit+0x5c>)
 800086c:	69db      	ldr	r3, [r3, #28]
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	607b      	str	r3, [r7, #4]
 8000874:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000876:	4b0a      	ldr	r3, [pc, #40]	; (80008a0 <HAL_MspInit+0x60>)
 8000878:	685b      	ldr	r3, [r3, #4]
 800087a:	60fb      	str	r3, [r7, #12]
 800087c:	68fb      	ldr	r3, [r7, #12]
 800087e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800088a:	60fb      	str	r3, [r7, #12]
 800088c:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_MspInit+0x60>)
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	bc80      	pop	{r7}
 800089a:	4770      	bx	lr
 800089c:	40021000 	.word	0x40021000
 80008a0:	40010000 	.word	0x40010000

080008a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 0318 	add.w	r3, r7, #24
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	681b      	ldr	r3, [r3, #0]
 80008be:	4a1f      	ldr	r2, [pc, #124]	; (800093c <HAL_ADC_MspInit+0x98>)
 80008c0:	4293      	cmp	r3, r2
 80008c2:	d137      	bne.n	8000934 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008c6:	699b      	ldr	r3, [r3, #24]
 80008c8:	4a1d      	ldr	r2, [pc, #116]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ce:	6193      	str	r3, [r2, #24]
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008d2:	699b      	ldr	r3, [r3, #24]
 80008d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80008d8:	617b      	str	r3, [r7, #20]
 80008da:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008de:	699b      	ldr	r3, [r3, #24]
 80008e0:	4a17      	ldr	r2, [pc, #92]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008e2:	f043 0304 	orr.w	r3, r3, #4
 80008e6:	6193      	str	r3, [r2, #24]
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008ea:	699b      	ldr	r3, [r3, #24]
 80008ec:	f003 0304 	and.w	r3, r3, #4
 80008f0:	613b      	str	r3, [r7, #16]
 80008f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008f6:	699b      	ldr	r3, [r3, #24]
 80008f8:	4a11      	ldr	r2, [pc, #68]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	6193      	str	r3, [r2, #24]
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <HAL_ADC_MspInit+0x9c>)
 8000902:	699b      	ldr	r3, [r3, #24]
 8000904:	f003 0308 	and.w	r3, r3, #8
 8000908:	60fb      	str	r3, [r7, #12]
 800090a:	68fb      	ldr	r3, [r7, #12]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = BATT_Pin|M0_NTC_Pin|M1_NTC_Pin|M2_NTC_Pin
 800090c:	23f2      	movs	r3, #242	; 0xf2
 800090e:	61bb      	str	r3, [r7, #24]
                          |M1_VPROPI_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000910:	2303      	movs	r3, #3
 8000912:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000914:	f107 0318 	add.w	r3, r7, #24
 8000918:	4619      	mov	r1, r3
 800091a:	480a      	ldr	r0, [pc, #40]	; (8000944 <HAL_ADC_MspInit+0xa0>)
 800091c:	f000 fdbe 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M2_VPROPI_Pin|M0_VPROPI_Pin;
 8000920:	2303      	movs	r3, #3
 8000922:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000924:	2303      	movs	r3, #3
 8000926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000928:	f107 0318 	add.w	r3, r7, #24
 800092c:	4619      	mov	r1, r3
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <HAL_ADC_MspInit+0xa4>)
 8000930:	f000 fdb4 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000934:	bf00      	nop
 8000936:	3728      	adds	r7, #40	; 0x28
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40012400 	.word	0x40012400
 8000940:	40021000 	.word	0x40021000
 8000944:	40010800 	.word	0x40010800
 8000948:	40010c00 	.word	0x40010c00

0800094c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b08a      	sub	sp, #40	; 0x28
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	f107 0314 	add.w	r3, r7, #20
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	4a1d      	ldr	r2, [pc, #116]	; (80009dc <HAL_I2C_MspInit+0x90>)
 8000968:	4293      	cmp	r3, r2
 800096a:	d132      	bne.n	80009d2 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800096c:	4b1c      	ldr	r3, [pc, #112]	; (80009e0 <HAL_I2C_MspInit+0x94>)
 800096e:	699b      	ldr	r3, [r3, #24]
 8000970:	4a1b      	ldr	r2, [pc, #108]	; (80009e0 <HAL_I2C_MspInit+0x94>)
 8000972:	f043 0308 	orr.w	r3, r3, #8
 8000976:	6193      	str	r3, [r2, #24]
 8000978:	4b19      	ldr	r3, [pc, #100]	; (80009e0 <HAL_I2C_MspInit+0x94>)
 800097a:	699b      	ldr	r3, [r3, #24]
 800097c:	f003 0308 	and.w	r3, r3, #8
 8000980:	613b      	str	r3, [r7, #16]
 8000982:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000984:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000988:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800098a:	2312      	movs	r3, #18
 800098c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800098e:	2303      	movs	r3, #3
 8000990:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	4619      	mov	r1, r3
 8000998:	4812      	ldr	r0, [pc, #72]	; (80009e4 <HAL_I2C_MspInit+0x98>)
 800099a:	f000 fd7f 	bl	800149c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <HAL_I2C_MspInit+0x9c>)
 80009a0:	685b      	ldr	r3, [r3, #4]
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
 80009a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009a6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
 80009ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009ae:	f043 0302 	orr.w	r3, r3, #2
 80009b2:	627b      	str	r3, [r7, #36]	; 0x24
 80009b4:	4a0c      	ldr	r2, [pc, #48]	; (80009e8 <HAL_I2C_MspInit+0x9c>)
 80009b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009b8:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80009ba:	4b09      	ldr	r3, [pc, #36]	; (80009e0 <HAL_I2C_MspInit+0x94>)
 80009bc:	69db      	ldr	r3, [r3, #28]
 80009be:	4a08      	ldr	r2, [pc, #32]	; (80009e0 <HAL_I2C_MspInit+0x94>)
 80009c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009c4:	61d3      	str	r3, [r2, #28]
 80009c6:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <HAL_I2C_MspInit+0x94>)
 80009c8:	69db      	ldr	r3, [r3, #28]
 80009ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ce:	60fb      	str	r3, [r7, #12]
 80009d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80009d2:	bf00      	nop
 80009d4:	3728      	adds	r7, #40	; 0x28
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	40005400 	.word	0x40005400
 80009e0:	40021000 	.word	0x40021000
 80009e4:	40010c00 	.word	0x40010c00
 80009e8:	40010000 	.word	0x40010000

080009ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b08a      	sub	sp, #40	; 0x28
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	2200      	movs	r2, #0
 80009fa:	601a      	str	r2, [r3, #0]
 80009fc:	605a      	str	r2, [r3, #4]
 80009fe:	609a      	str	r2, [r3, #8]
 8000a00:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <HAL_SPI_MspInit+0x8c>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d131      	bne.n	8000a70 <HAL_SPI_MspInit+0x84>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000a0c:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_SPI_MspInit+0x90>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <HAL_SPI_MspInit+0x90>)
 8000a12:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b18      	ldr	r3, [pc, #96]	; (8000a7c <HAL_SPI_MspInit+0x90>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a20:	613b      	str	r3, [r7, #16]
 8000a22:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a24:	4b15      	ldr	r3, [pc, #84]	; (8000a7c <HAL_SPI_MspInit+0x90>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a14      	ldr	r2, [pc, #80]	; (8000a7c <HAL_SPI_MspInit+0x90>)
 8000a2a:	f043 0308 	orr.w	r3, r3, #8
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b12      	ldr	r3, [pc, #72]	; (8000a7c <HAL_SPI_MspInit+0x90>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0308 	and.w	r3, r3, #8
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000a3c:	2328      	movs	r3, #40	; 0x28
 8000a3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a40:	2302      	movs	r3, #2
 8000a42:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a44:	2303      	movs	r3, #3
 8000a46:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a48:	f107 0314 	add.w	r3, r7, #20
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	480c      	ldr	r0, [pc, #48]	; (8000a80 <HAL_SPI_MspInit+0x94>)
 8000a50:	f000 fd24 	bl	800149c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_SPI1_ENABLE();
 8000a54:	4b0b      	ldr	r3, [pc, #44]	; (8000a84 <HAL_SPI_MspInit+0x98>)
 8000a56:	685b      	ldr	r3, [r3, #4]
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
 8000a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a5c:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
 8000a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	627b      	str	r3, [r7, #36]	; 0x24
 8000a6a:	4a06      	ldr	r2, [pc, #24]	; (8000a84 <HAL_SPI_MspInit+0x98>)
 8000a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a6e:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000a70:	bf00      	nop
 8000a72:	3728      	adds	r7, #40	; 0x28
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	40013000 	.word	0x40013000
 8000a7c:	40021000 	.word	0x40021000
 8000a80:	40010c00 	.word	0x40010c00
 8000a84:	40010000 	.word	0x40010000

08000a88 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b085      	sub	sp, #20
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8000a90:	687b      	ldr	r3, [r7, #4]
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	4a09      	ldr	r2, [pc, #36]	; (8000abc <HAL_TIM_PWM_MspInit+0x34>)
 8000a96:	4293      	cmp	r3, r2
 8000a98:	d10b      	bne.n	8000ab2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000a9a:	4b09      	ldr	r3, [pc, #36]	; (8000ac0 <HAL_TIM_PWM_MspInit+0x38>)
 8000a9c:	699b      	ldr	r3, [r3, #24]
 8000a9e:	4a08      	ldr	r2, [pc, #32]	; (8000ac0 <HAL_TIM_PWM_MspInit+0x38>)
 8000aa0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000aa4:	6193      	str	r3, [r2, #24]
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_TIM_PWM_MspInit+0x38>)
 8000aa8:	699b      	ldr	r3, [r3, #24]
 8000aaa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000ab2:	bf00      	nop
 8000ab4:	3714      	adds	r7, #20
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bc80      	pop	{r7}
 8000aba:	4770      	bx	lr
 8000abc:	40012c00 	.word	0x40012c00
 8000ac0:	40021000 	.word	0x40021000

08000ac4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b08e      	sub	sp, #56	; 0x38
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000acc:	f107 0320 	add.w	r3, r7, #32
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	601a      	str	r2, [r3, #0]
 8000ad4:	605a      	str	r2, [r3, #4]
 8000ad6:	609a      	str	r2, [r3, #8]
 8000ad8:	60da      	str	r2, [r3, #12]
  if(htim_base->Instance==TIM2)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ae2:	d137      	bne.n	8000b54 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000ae4:	4b50      	ldr	r3, [pc, #320]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000ae6:	69db      	ldr	r3, [r3, #28]
 8000ae8:	4a4f      	ldr	r2, [pc, #316]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000aea:	f043 0301 	orr.w	r3, r3, #1
 8000aee:	61d3      	str	r3, [r2, #28]
 8000af0:	4b4d      	ldr	r3, [pc, #308]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000af2:	69db      	ldr	r3, [r3, #28]
 8000af4:	f003 0301 	and.w	r3, r3, #1
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afc:	4b4a      	ldr	r3, [pc, #296]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	4a49      	ldr	r2, [pc, #292]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b02:	f043 0304 	orr.w	r3, r3, #4
 8000b06:	6193      	str	r3, [r2, #24]
 8000b08:	4b47      	ldr	r3, [pc, #284]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b0a:	699b      	ldr	r3, [r3, #24]
 8000b0c:	f003 0304 	and.w	r3, r3, #4
 8000b10:	61bb      	str	r3, [r7, #24]
 8000b12:	69bb      	ldr	r3, [r7, #24]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = M0_ENC_Pin;
 8000b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(M0_ENC_GPIO_Port, &GPIO_InitStruct);
 8000b22:	f107 0320 	add.w	r3, r7, #32
 8000b26:	4619      	mov	r1, r3
 8000b28:	4840      	ldr	r0, [pc, #256]	; (8000c2c <HAL_TIM_Base_MspInit+0x168>)
 8000b2a:	f000 fcb7 	bl	800149c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM2_PARTIAL_1();
 8000b2e:	4b40      	ldr	r3, [pc, #256]	; (8000c30 <HAL_TIM_Base_MspInit+0x16c>)
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	633b      	str	r3, [r7, #48]	; 0x30
 8000b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000b3a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b3e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000b42:	633b      	str	r3, [r7, #48]	; 0x30
 8000b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b4a:	633b      	str	r3, [r7, #48]	; 0x30
 8000b4c:	4a38      	ldr	r2, [pc, #224]	; (8000c30 <HAL_TIM_Base_MspInit+0x16c>)
 8000b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b50:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000b52:	e064      	b.n	8000c1e <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a36      	ldr	r2, [pc, #216]	; (8000c34 <HAL_TIM_Base_MspInit+0x170>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d136      	bne.n	8000bcc <HAL_TIM_Base_MspInit+0x108>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b5e:	4b32      	ldr	r3, [pc, #200]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b60:	69db      	ldr	r3, [r3, #28]
 8000b62:	4a31      	ldr	r2, [pc, #196]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	61d3      	str	r3, [r2, #28]
 8000b6a:	4b2f      	ldr	r3, [pc, #188]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b6c:	69db      	ldr	r3, [r3, #28]
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b76:	4b2c      	ldr	r3, [pc, #176]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b78:	699b      	ldr	r3, [r3, #24]
 8000b7a:	4a2b      	ldr	r2, [pc, #172]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b7c:	f043 0308 	orr.w	r3, r3, #8
 8000b80:	6193      	str	r3, [r2, #24]
 8000b82:	4b29      	ldr	r3, [pc, #164]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000b84:	699b      	ldr	r3, [r3, #24]
 8000b86:	f003 0308 	and.w	r3, r3, #8
 8000b8a:	613b      	str	r3, [r7, #16]
 8000b8c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = M2_ENC_Pin;
 8000b8e:	2310      	movs	r3, #16
 8000b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(M2_ENC_GPIO_Port, &GPIO_InitStruct);
 8000b9a:	f107 0320 	add.w	r3, r7, #32
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	4825      	ldr	r0, [pc, #148]	; (8000c38 <HAL_TIM_Base_MspInit+0x174>)
 8000ba2:	f000 fc7b 	bl	800149c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_PARTIAL();
 8000ba6:	4b22      	ldr	r3, [pc, #136]	; (8000c30 <HAL_TIM_Base_MspInit+0x16c>)
 8000ba8:	685b      	ldr	r3, [r3, #4]
 8000baa:	637b      	str	r3, [r7, #52]	; 0x34
 8000bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bae:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000bb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bb6:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8000bba:	637b      	str	r3, [r7, #52]	; 0x34
 8000bbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bbe:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000bc2:	637b      	str	r3, [r7, #52]	; 0x34
 8000bc4:	4a1a      	ldr	r2, [pc, #104]	; (8000c30 <HAL_TIM_Base_MspInit+0x16c>)
 8000bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000bc8:	6053      	str	r3, [r2, #4]
}
 8000bca:	e028      	b.n	8000c1e <HAL_TIM_Base_MspInit+0x15a>
  else if(htim_base->Instance==TIM4)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a1a      	ldr	r2, [pc, #104]	; (8000c3c <HAL_TIM_Base_MspInit+0x178>)
 8000bd2:	4293      	cmp	r3, r2
 8000bd4:	d123      	bne.n	8000c1e <HAL_TIM_Base_MspInit+0x15a>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bd6:	4b14      	ldr	r3, [pc, #80]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000bd8:	69db      	ldr	r3, [r3, #28]
 8000bda:	4a13      	ldr	r2, [pc, #76]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000bdc:	f043 0304 	orr.w	r3, r3, #4
 8000be0:	61d3      	str	r3, [r2, #28]
 8000be2:	4b11      	ldr	r3, [pc, #68]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000be4:	69db      	ldr	r3, [r3, #28]
 8000be6:	f003 0304 	and.w	r3, r3, #4
 8000bea:	60fb      	str	r3, [r7, #12]
 8000bec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bee:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000bf0:	699b      	ldr	r3, [r3, #24]
 8000bf2:	4a0d      	ldr	r2, [pc, #52]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000bf4:	f043 0308 	orr.w	r3, r3, #8
 8000bf8:	6193      	str	r3, [r2, #24]
 8000bfa:	4b0b      	ldr	r3, [pc, #44]	; (8000c28 <HAL_TIM_Base_MspInit+0x164>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	60bb      	str	r3, [r7, #8]
 8000c04:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = M1_ENC_Pin;
 8000c06:	2340      	movs	r3, #64	; 0x40
 8000c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	62bb      	str	r3, [r7, #40]	; 0x28
    HAL_GPIO_Init(M1_ENC_GPIO_Port, &GPIO_InitStruct);
 8000c12:	f107 0320 	add.w	r3, r7, #32
 8000c16:	4619      	mov	r1, r3
 8000c18:	4807      	ldr	r0, [pc, #28]	; (8000c38 <HAL_TIM_Base_MspInit+0x174>)
 8000c1a:	f000 fc3f 	bl	800149c <HAL_GPIO_Init>
}
 8000c1e:	bf00      	nop
 8000c20:	3738      	adds	r7, #56	; 0x38
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	40010800 	.word	0x40010800
 8000c30:	40010000 	.word	0x40010000
 8000c34:	40000400 	.word	0x40000400
 8000c38:	40010c00 	.word	0x40010c00
 8000c3c:	40000800 	.word	0x40000800

08000c40 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b088      	sub	sp, #32
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0310 	add.w	r3, r7, #16
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM1)
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a16      	ldr	r2, [pc, #88]	; (8000cb4 <HAL_TIM_MspPostInit+0x74>)
 8000c5c:	4293      	cmp	r3, r2
 8000c5e:	d125      	bne.n	8000cac <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c60:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <HAL_TIM_MspPostInit+0x78>)
 8000c62:	699b      	ldr	r3, [r3, #24]
 8000c64:	4a14      	ldr	r2, [pc, #80]	; (8000cb8 <HAL_TIM_MspPostInit+0x78>)
 8000c66:	f043 0304 	orr.w	r3, r3, #4
 8000c6a:	6193      	str	r3, [r2, #24]
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <HAL_TIM_MspPostInit+0x78>)
 8000c6e:	699b      	ldr	r3, [r3, #24]
 8000c70:	f003 0304 	and.w	r3, r3, #4
 8000c74:	60fb      	str	r3, [r7, #12]
 8000c76:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = M1_PHASE_Pin|M2_PHASE_Pin;
 8000c78:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7e:	2302      	movs	r3, #2
 8000c80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c82:	2303      	movs	r3, #3
 8000c84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c86:	f107 0310 	add.w	r3, r7, #16
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	480b      	ldr	r0, [pc, #44]	; (8000cbc <HAL_TIM_MspPostInit+0x7c>)
 8000c8e:	f000 fc05 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = M0_PHASE_Pin;
 8000c92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c96:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c98:	2302      	movs	r3, #2
 8000c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(M0_PHASE_GPIO_Port, &GPIO_InitStruct);
 8000ca0:	f107 0310 	add.w	r3, r7, #16
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4805      	ldr	r0, [pc, #20]	; (8000cbc <HAL_TIM_MspPostInit+0x7c>)
 8000ca8:	f000 fbf8 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000cac:	bf00      	nop
 8000cae:	3720      	adds	r7, #32
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	40012c00 	.word	0x40012c00
 8000cb8:	40021000 	.word	0x40021000
 8000cbc:	40010800 	.word	0x40010800

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b088      	sub	sp, #32
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0310 	add.w	r3, r7, #16
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	4a1b      	ldr	r2, [pc, #108]	; (8000d48 <HAL_UART_MspInit+0x88>)
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	d12f      	bne.n	8000d40 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ce0:	4b1a      	ldr	r3, [pc, #104]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000ce2:	69db      	ldr	r3, [r3, #28]
 8000ce4:	4a19      	ldr	r2, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cea:	61d3      	str	r3, [r2, #28]
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000cee:	69db      	ldr	r3, [r3, #28]
 8000cf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cf4:	60fb      	str	r3, [r7, #12]
 8000cf6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	4a13      	ldr	r2, [pc, #76]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000cfe:	f043 0304 	orr.w	r3, r3, #4
 8000d02:	6193      	str	r3, [r2, #24]
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0x8c>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	f003 0304 	and.w	r3, r3, #4
 8000d0c:	60bb      	str	r3, [r7, #8]
 8000d0e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000d10:	2304      	movs	r3, #4
 8000d12:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d14:	2302      	movs	r3, #2
 8000d16:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d18:	2303      	movs	r3, #3
 8000d1a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1c:	f107 0310 	add.w	r3, r7, #16
 8000d20:	4619      	mov	r1, r3
 8000d22:	480b      	ldr	r0, [pc, #44]	; (8000d50 <HAL_UART_MspInit+0x90>)
 8000d24:	f000 fbba 	bl	800149c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000d28:	2308      	movs	r3, #8
 8000d2a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d30:	2300      	movs	r3, #0
 8000d32:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	4619      	mov	r1, r3
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <HAL_UART_MspInit+0x90>)
 8000d3c:	f000 fbae 	bl	800149c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d40:	bf00      	nop
 8000d42:	3720      	adds	r7, #32
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	40004400 	.word	0x40004400
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40010800 	.word	0x40010800

08000d54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d58:	e7fe      	b.n	8000d58 <NMI_Handler+0x4>

08000d5a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d5a:	b480      	push	{r7}
 8000d5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5e:	e7fe      	b.n	8000d5e <HardFault_Handler+0x4>

08000d60 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <MemManage_Handler+0x4>

08000d66 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <BusFault_Handler+0x4>

08000d6c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <UsageFault_Handler+0x4>

08000d72 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bc80      	pop	{r7}
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bc80      	pop	{r7}
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	bc80      	pop	{r7}
 8000d94:	4770      	bx	lr

08000d96 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d96:	b580      	push	{r7, lr}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9a:	f000 f875 	bl	8000e88 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	bd80      	pop	{r7, pc}

08000da2 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da6:	bf00      	nop
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bc80      	pop	{r7}
 8000dac:	4770      	bx	lr
	...

08000db0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000db0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000db2:	e003      	b.n	8000dbc <LoopCopyDataInit>

08000db4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000db4:	4b0b      	ldr	r3, [pc, #44]	; (8000de4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000db6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000db8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000dba:	3104      	adds	r1, #4

08000dbc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000dbc:	480a      	ldr	r0, [pc, #40]	; (8000de8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000dbe:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000dc0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000dc2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000dc4:	d3f6      	bcc.n	8000db4 <CopyDataInit>
  ldr r2, =_sbss
 8000dc6:	4a0a      	ldr	r2, [pc, #40]	; (8000df0 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000dc8:	e002      	b.n	8000dd0 <LoopFillZerobss>

08000dca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000dcc:	f842 3b04 	str.w	r3, [r2], #4

08000dd0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000dd0:	4b08      	ldr	r3, [pc, #32]	; (8000df4 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000dd2:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000dd4:	d3f9      	bcc.n	8000dca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000dd6:	f7ff ffe4 	bl	8000da2 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dda:	f002 f973 	bl	80030c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dde:	f7ff f9b5 	bl	800014c <main>
  bx lr
 8000de2:	4770      	bx	lr
  ldr r3, =_sidata
 8000de4:	08003168 	.word	0x08003168
  ldr r0, =_sdata
 8000de8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000dec:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000df0:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000df4:	20000268 	.word	0x20000268

08000df8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df8:	e7fe      	b.n	8000df8 <ADC1_2_IRQHandler>
	...

08000dfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <HAL_Init+0x28>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	4a07      	ldr	r2, [pc, #28]	; (8000e24 <HAL_Init+0x28>)
 8000e06:	f043 0310 	orr.w	r3, r3, #16
 8000e0a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e0c:	2003      	movs	r0, #3
 8000e0e:	f000 fb11 	bl	8001434 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e12:	2000      	movs	r0, #0
 8000e14:	f000 f808 	bl	8000e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e18:	f7ff fd12 	bl	8000840 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e1c:	2300      	movs	r3, #0
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	bf00      	nop
 8000e24:	40022000 	.word	0x40022000

08000e28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b082      	sub	sp, #8
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e30:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_InitTick+0x54>)
 8000e32:	681a      	ldr	r2, [r3, #0]
 8000e34:	4b12      	ldr	r3, [pc, #72]	; (8000e80 <HAL_InitTick+0x58>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e46:	4618      	mov	r0, r3
 8000e48:	f000 fb1b 	bl	8001482 <HAL_SYSTICK_Config>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00e      	b.n	8000e74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2b0f      	cmp	r3, #15
 8000e5a:	d80a      	bhi.n	8000e72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	6879      	ldr	r1, [r7, #4]
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e64:	f000 faf1 	bl	800144a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e68:	4a06      	ldr	r2, [pc, #24]	; (8000e84 <HAL_InitTick+0x5c>)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	e000      	b.n	8000e74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e72:	2301      	movs	r3, #1
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	20000000 	.word	0x20000000
 8000e80:	20000008 	.word	0x20000008
 8000e84:	20000004 	.word	0x20000004

08000e88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <HAL_IncTick+0x1c>)
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	461a      	mov	r2, r3
 8000e92:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	4413      	add	r3, r2
 8000e98:	4a03      	ldr	r2, [pc, #12]	; (8000ea8 <HAL_IncTick+0x20>)
 8000e9a:	6013      	str	r3, [r2, #0]
}
 8000e9c:	bf00      	nop
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bc80      	pop	{r7}
 8000ea2:	4770      	bx	lr
 8000ea4:	20000008 	.word	0x20000008
 8000ea8:	20000264 	.word	0x20000264

08000eac <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  return uwTick;
 8000eb0:	4b02      	ldr	r3, [pc, #8]	; (8000ebc <HAL_GetTick+0x10>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bc80      	pop	{r7}
 8000eba:	4770      	bx	lr
 8000ebc:	20000264 	.word	0x20000264

08000ec0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b086      	sub	sp, #24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e0be      	b.n	8001060 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	689b      	ldr	r3, [r3, #8]
 8000ee6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d109      	bne.n	8000f04 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff fcd0 	bl	80008a4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000f04:	6878      	ldr	r0, [r7, #4]
 8000f06:	f000 f9ab 	bl	8001260 <ADC_ConversionStop_Disable>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	f040 8099 	bne.w	800104e <HAL_ADC_Init+0x18e>
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	f040 8095 	bne.w	800104e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f28:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f2c:	f023 0302 	bic.w	r3, r3, #2
 8000f30:	f043 0202 	orr.w	r2, r3, #2
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f40:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	7b1b      	ldrb	r3, [r3, #12]
 8000f46:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000f48:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000f4a:	68ba      	ldr	r2, [r7, #8]
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f58:	d003      	beq.n	8000f62 <HAL_ADC_Init+0xa2>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	689b      	ldr	r3, [r3, #8]
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d102      	bne.n	8000f68 <HAL_ADC_Init+0xa8>
 8000f62:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f66:	e000      	b.n	8000f6a <HAL_ADC_Init+0xaa>
 8000f68:	2300      	movs	r3, #0
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	7d1b      	ldrb	r3, [r3, #20]
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d119      	bne.n	8000fac <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	7b1b      	ldrb	r3, [r3, #12]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d109      	bne.n	8000f94 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	699b      	ldr	r3, [r3, #24]
 8000f84:	3b01      	subs	r3, #1
 8000f86:	035a      	lsls	r2, r3, #13
 8000f88:	693b      	ldr	r3, [r7, #16]
 8000f8a:	4313      	orrs	r3, r2
 8000f8c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f90:	613b      	str	r3, [r7, #16]
 8000f92:	e00b      	b.n	8000fac <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	f043 0220 	orr.w	r2, r3, #32
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa4:	f043 0201 	orr.w	r2, r3, #1
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	693a      	ldr	r2, [r7, #16]
 8000fbc:	430a      	orrs	r2, r1
 8000fbe:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	689a      	ldr	r2, [r3, #8]
 8000fc6:	4b28      	ldr	r3, [pc, #160]	; (8001068 <HAL_ADC_Init+0x1a8>)
 8000fc8:	4013      	ands	r3, r2
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	6812      	ldr	r2, [r2, #0]
 8000fce:	68b9      	ldr	r1, [r7, #8]
 8000fd0:	430b      	orrs	r3, r1
 8000fd2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fdc:	d003      	beq.n	8000fe6 <HAL_ADC_Init+0x126>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	2b01      	cmp	r3, #1
 8000fe4:	d104      	bne.n	8000ff0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	691b      	ldr	r3, [r3, #16]
 8000fea:	3b01      	subs	r3, #1
 8000fec:	051b      	lsls	r3, r3, #20
 8000fee:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	68fa      	ldr	r2, [r7, #12]
 8001000:	430a      	orrs	r2, r1
 8001002:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689a      	ldr	r2, [r3, #8]
 800100a:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_ADC_Init+0x1ac>)
 800100c:	4013      	ands	r3, r2
 800100e:	68ba      	ldr	r2, [r7, #8]
 8001010:	429a      	cmp	r2, r3
 8001012:	d10b      	bne.n	800102c <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	2200      	movs	r2, #0
 8001018:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800101e:	f023 0303 	bic.w	r3, r3, #3
 8001022:	f043 0201 	orr.w	r2, r3, #1
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800102a:	e018      	b.n	800105e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001030:	f023 0312 	bic.w	r3, r3, #18
 8001034:	f043 0210 	orr.w	r2, r3, #16
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	f043 0201 	orr.w	r2, r3, #1
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8001048:	2301      	movs	r3, #1
 800104a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800104c:	e007      	b.n	800105e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001052:	f043 0210 	orr.w	r2, r3, #16
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800105a:	2301      	movs	r3, #1
 800105c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800105e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	ffe1f7fd 	.word	0xffe1f7fd
 800106c:	ff1f0efe 	.word	0xff1f0efe

08001070 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001070:	b480      	push	{r7}
 8001072:	b085      	sub	sp, #20
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
 8001078:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800107a:	2300      	movs	r3, #0
 800107c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001088:	2b01      	cmp	r3, #1
 800108a:	d101      	bne.n	8001090 <HAL_ADC_ConfigChannel+0x20>
 800108c:	2302      	movs	r3, #2
 800108e:	e0dc      	b.n	800124a <HAL_ADC_ConfigChannel+0x1da>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	2201      	movs	r2, #1
 8001094:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b06      	cmp	r3, #6
 800109e:	d81c      	bhi.n	80010da <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685a      	ldr	r2, [r3, #4]
 80010aa:	4613      	mov	r3, r2
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	4413      	add	r3, r2
 80010b0:	3b05      	subs	r3, #5
 80010b2:	221f      	movs	r2, #31
 80010b4:	fa02 f303 	lsl.w	r3, r2, r3
 80010b8:	43db      	mvns	r3, r3
 80010ba:	4019      	ands	r1, r3
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	6818      	ldr	r0, [r3, #0]
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685a      	ldr	r2, [r3, #4]
 80010c4:	4613      	mov	r3, r2
 80010c6:	009b      	lsls	r3, r3, #2
 80010c8:	4413      	add	r3, r2
 80010ca:	3b05      	subs	r3, #5
 80010cc:	fa00 f203 	lsl.w	r2, r0, r3
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	430a      	orrs	r2, r1
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
 80010d8:	e03c      	b.n	8001154 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	2b0c      	cmp	r3, #12
 80010e0:	d81c      	bhi.n	800111c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	4613      	mov	r3, r2
 80010ee:	009b      	lsls	r3, r3, #2
 80010f0:	4413      	add	r3, r2
 80010f2:	3b23      	subs	r3, #35	; 0x23
 80010f4:	221f      	movs	r2, #31
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	4019      	ands	r1, r3
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	6818      	ldr	r0, [r3, #0]
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	3b23      	subs	r3, #35	; 0x23
 800110e:	fa00 f203 	lsl.w	r2, r0, r3
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	430a      	orrs	r2, r1
 8001118:	631a      	str	r2, [r3, #48]	; 0x30
 800111a:	e01b      	b.n	8001154 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001122:	683b      	ldr	r3, [r7, #0]
 8001124:	685a      	ldr	r2, [r3, #4]
 8001126:	4613      	mov	r3, r2
 8001128:	009b      	lsls	r3, r3, #2
 800112a:	4413      	add	r3, r2
 800112c:	3b41      	subs	r3, #65	; 0x41
 800112e:	221f      	movs	r2, #31
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	4019      	ands	r1, r3
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	6818      	ldr	r0, [r3, #0]
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	685a      	ldr	r2, [r3, #4]
 8001140:	4613      	mov	r3, r2
 8001142:	009b      	lsls	r3, r3, #2
 8001144:	4413      	add	r3, r2
 8001146:	3b41      	subs	r3, #65	; 0x41
 8001148:	fa00 f203 	lsl.w	r2, r0, r3
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	430a      	orrs	r2, r1
 8001152:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b09      	cmp	r3, #9
 800115a:	d91c      	bls.n	8001196 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68d9      	ldr	r1, [r3, #12]
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681a      	ldr	r2, [r3, #0]
 8001166:	4613      	mov	r3, r2
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	4413      	add	r3, r2
 800116c:	3b1e      	subs	r3, #30
 800116e:	2207      	movs	r2, #7
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	4019      	ands	r1, r3
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	6898      	ldr	r0, [r3, #8]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	3b1e      	subs	r3, #30
 8001188:	fa00 f203 	lsl.w	r2, r0, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	60da      	str	r2, [r3, #12]
 8001194:	e019      	b.n	80011ca <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	6919      	ldr	r1, [r3, #16]
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	4613      	mov	r3, r2
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	4413      	add	r3, r2
 80011a6:	2207      	movs	r2, #7
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	4019      	ands	r1, r3
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	6898      	ldr	r0, [r3, #8]
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	4613      	mov	r3, r2
 80011ba:	005b      	lsls	r3, r3, #1
 80011bc:	4413      	add	r3, r2
 80011be:	fa00 f203 	lsl.w	r2, r0, r3
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	430a      	orrs	r2, r1
 80011c8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	2b10      	cmp	r3, #16
 80011d0:	d003      	beq.n	80011da <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011d6:	2b11      	cmp	r3, #17
 80011d8:	d132      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a1d      	ldr	r2, [pc, #116]	; (8001254 <HAL_ADC_ConfigChannel+0x1e4>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d125      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d126      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001200:	609a      	str	r2, [r3, #8]
        
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	2b10      	cmp	r3, #16
 8001208:	d11a      	bne.n	8001240 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800120a:	4b13      	ldr	r3, [pc, #76]	; (8001258 <HAL_ADC_ConfigChannel+0x1e8>)
 800120c:	681b      	ldr	r3, [r3, #0]
 800120e:	4a13      	ldr	r2, [pc, #76]	; (800125c <HAL_ADC_ConfigChannel+0x1ec>)
 8001210:	fba2 2303 	umull	r2, r3, r2, r3
 8001214:	0c9a      	lsrs	r2, r3, #18
 8001216:	4613      	mov	r3, r2
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	4413      	add	r3, r2
 800121c:	005b      	lsls	r3, r3, #1
 800121e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001220:	e002      	b.n	8001228 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001222:	68bb      	ldr	r3, [r7, #8]
 8001224:	3b01      	subs	r3, #1
 8001226:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	2b00      	cmp	r3, #0
 800122c:	d1f9      	bne.n	8001222 <HAL_ADC_ConfigChannel+0x1b2>
 800122e:	e007      	b.n	8001240 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001234:	f043 0220 	orr.w	r2, r3, #32
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	2200      	movs	r2, #0
 8001244:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001248:	7bfb      	ldrb	r3, [r7, #15]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	40012400 	.word	0x40012400
 8001258:	20000000 	.word	0x20000000
 800125c:	431bde83 	.word	0x431bde83

08001260 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b084      	sub	sp, #16
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001268:	2300      	movs	r3, #0
 800126a:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 0301 	and.w	r3, r3, #1
 8001276:	2b01      	cmp	r3, #1
 8001278:	d127      	bne.n	80012ca <ADC_ConversionStop_Disable+0x6a>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 0201 	bic.w	r2, r2, #1
 8001288:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800128a:	f7ff fe0f 	bl	8000eac <HAL_GetTick>
 800128e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001290:	e014      	b.n	80012bc <ADC_ConversionStop_Disable+0x5c>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001292:	f7ff fe0b 	bl	8000eac <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d90d      	bls.n	80012bc <ADC_ConversionStop_Disable+0x5c>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012a4:	f043 0210 	orr.w	r2, r3, #16
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b0:	f043 0201 	orr.w	r2, r3, #1
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	62da      	str	r2, [r3, #44]	; 0x2c
        
        return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e007      	b.n	80012cc <ADC_ConversionStop_Disable+0x6c>
    while(ADC_IS_ENABLE(hadc) != RESET)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	689b      	ldr	r3, [r3, #8]
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	2b01      	cmp	r3, #1
 80012c8:	d0e3      	beq.n	8001292 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 80012ca:	2300      	movs	r3, #0
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3710      	adds	r7, #16
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b085      	sub	sp, #20
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	f003 0307 	and.w	r3, r3, #7
 80012e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012e4:	4b0c      	ldr	r3, [pc, #48]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 80012e6:	68db      	ldr	r3, [r3, #12]
 80012e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012f0:	4013      	ands	r3, r2
 80012f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f8:	68bb      	ldr	r3, [r7, #8]
 80012fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001306:	4a04      	ldr	r2, [pc, #16]	; (8001318 <__NVIC_SetPriorityGrouping+0x44>)
 8001308:	68bb      	ldr	r3, [r7, #8]
 800130a:	60d3      	str	r3, [r2, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
 8001316:	bf00      	nop
 8001318:	e000ed00 	.word	0xe000ed00

0800131c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800131c:	b480      	push	{r7}
 800131e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001320:	4b04      	ldr	r3, [pc, #16]	; (8001334 <__NVIC_GetPriorityGrouping+0x18>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	0a1b      	lsrs	r3, r3, #8
 8001326:	f003 0307 	and.w	r3, r3, #7
}
 800132a:	4618      	mov	r0, r3
 800132c:	46bd      	mov	sp, r7
 800132e:	bc80      	pop	{r7}
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	e000ed00 	.word	0xe000ed00

08001338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001338:	b480      	push	{r7}
 800133a:	b083      	sub	sp, #12
 800133c:	af00      	add	r7, sp, #0
 800133e:	4603      	mov	r3, r0
 8001340:	6039      	str	r1, [r7, #0]
 8001342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001348:	2b00      	cmp	r3, #0
 800134a:	db0a      	blt.n	8001362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800134c:	683b      	ldr	r3, [r7, #0]
 800134e:	b2da      	uxtb	r2, r3
 8001350:	490c      	ldr	r1, [pc, #48]	; (8001384 <__NVIC_SetPriority+0x4c>)
 8001352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001356:	0112      	lsls	r2, r2, #4
 8001358:	b2d2      	uxtb	r2, r2
 800135a:	440b      	add	r3, r1
 800135c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001360:	e00a      	b.n	8001378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	b2da      	uxtb	r2, r3
 8001366:	4908      	ldr	r1, [pc, #32]	; (8001388 <__NVIC_SetPriority+0x50>)
 8001368:	79fb      	ldrb	r3, [r7, #7]
 800136a:	f003 030f 	and.w	r3, r3, #15
 800136e:	3b04      	subs	r3, #4
 8001370:	0112      	lsls	r2, r2, #4
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	440b      	add	r3, r1
 8001376:	761a      	strb	r2, [r3, #24]
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	bc80      	pop	{r7}
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	e000e100 	.word	0xe000e100
 8001388:	e000ed00 	.word	0xe000ed00

0800138c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800138c:	b480      	push	{r7}
 800138e:	b089      	sub	sp, #36	; 0x24
 8001390:	af00      	add	r7, sp, #0
 8001392:	60f8      	str	r0, [r7, #12]
 8001394:	60b9      	str	r1, [r7, #8]
 8001396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	f003 0307 	and.w	r3, r3, #7
 800139e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	f1c3 0307 	rsb	r3, r3, #7
 80013a6:	2b04      	cmp	r3, #4
 80013a8:	bf28      	it	cs
 80013aa:	2304      	movcs	r3, #4
 80013ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3304      	adds	r3, #4
 80013b2:	2b06      	cmp	r3, #6
 80013b4:	d902      	bls.n	80013bc <NVIC_EncodePriority+0x30>
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	3b03      	subs	r3, #3
 80013ba:	e000      	b.n	80013be <NVIC_EncodePriority+0x32>
 80013bc:	2300      	movs	r3, #0
 80013be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ca:	43da      	mvns	r2, r3
 80013cc:	68bb      	ldr	r3, [r7, #8]
 80013ce:	401a      	ands	r2, r3
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013d8:	697b      	ldr	r3, [r7, #20]
 80013da:	fa01 f303 	lsl.w	r3, r1, r3
 80013de:	43d9      	mvns	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013e4:	4313      	orrs	r3, r2
         );
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3724      	adds	r7, #36	; 0x24
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bc80      	pop	{r7}
 80013ee:	4770      	bx	lr

080013f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	3b01      	subs	r3, #1
 80013fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001400:	d301      	bcc.n	8001406 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001402:	2301      	movs	r3, #1
 8001404:	e00f      	b.n	8001426 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001406:	4a0a      	ldr	r2, [pc, #40]	; (8001430 <SysTick_Config+0x40>)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3b01      	subs	r3, #1
 800140c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140e:	210f      	movs	r1, #15
 8001410:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001414:	f7ff ff90 	bl	8001338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001418:	4b05      	ldr	r3, [pc, #20]	; (8001430 <SysTick_Config+0x40>)
 800141a:	2200      	movs	r2, #0
 800141c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141e:	4b04      	ldr	r3, [pc, #16]	; (8001430 <SysTick_Config+0x40>)
 8001420:	2207      	movs	r2, #7
 8001422:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001424:	2300      	movs	r3, #0
}
 8001426:	4618      	mov	r0, r3
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	e000e010 	.word	0xe000e010

08001434 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001434:	b580      	push	{r7, lr}
 8001436:	b082      	sub	sp, #8
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	f7ff ff49 	bl	80012d4 <__NVIC_SetPriorityGrouping>
}
 8001442:	bf00      	nop
 8001444:	3708      	adds	r7, #8
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}

0800144a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800144a:	b580      	push	{r7, lr}
 800144c:	b086      	sub	sp, #24
 800144e:	af00      	add	r7, sp, #0
 8001450:	4603      	mov	r3, r0
 8001452:	60b9      	str	r1, [r7, #8]
 8001454:	607a      	str	r2, [r7, #4]
 8001456:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001458:	2300      	movs	r3, #0
 800145a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800145c:	f7ff ff5e 	bl	800131c <__NVIC_GetPriorityGrouping>
 8001460:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	68b9      	ldr	r1, [r7, #8]
 8001466:	6978      	ldr	r0, [r7, #20]
 8001468:	f7ff ff90 	bl	800138c <NVIC_EncodePriority>
 800146c:	4602      	mov	r2, r0
 800146e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001472:	4611      	mov	r1, r2
 8001474:	4618      	mov	r0, r3
 8001476:	f7ff ff5f 	bl	8001338 <__NVIC_SetPriority>
}
 800147a:	bf00      	nop
 800147c:	3718      	adds	r7, #24
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}

08001482 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f7ff ffb0 	bl	80013f0 <SysTick_Config>
 8001490:	4603      	mov	r3, r0
}
 8001492:	4618      	mov	r0, r3
 8001494:	3708      	adds	r7, #8
 8001496:	46bd      	mov	sp, r7
 8001498:	bd80      	pop	{r7, pc}
	...

0800149c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800149c:	b480      	push	{r7}
 800149e:	b08b      	sub	sp, #44	; 0x2c
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
 80014a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014a6:	2300      	movs	r3, #0
 80014a8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80014aa:	2300      	movs	r3, #0
 80014ac:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014ae:	e127      	b.n	8001700 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80014b0:	2201      	movs	r2, #1
 80014b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b4:	fa02 f303 	lsl.w	r3, r2, r3
 80014b8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014ba:	683b      	ldr	r3, [r7, #0]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	69fa      	ldr	r2, [r7, #28]
 80014c0:	4013      	ands	r3, r2
 80014c2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	69fb      	ldr	r3, [r7, #28]
 80014c8:	429a      	cmp	r2, r3
 80014ca:	f040 8116 	bne.w	80016fa <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2b12      	cmp	r3, #18
 80014d4:	d034      	beq.n	8001540 <HAL_GPIO_Init+0xa4>
 80014d6:	2b12      	cmp	r3, #18
 80014d8:	d80d      	bhi.n	80014f6 <HAL_GPIO_Init+0x5a>
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d02b      	beq.n	8001536 <HAL_GPIO_Init+0x9a>
 80014de:	2b02      	cmp	r3, #2
 80014e0:	d804      	bhi.n	80014ec <HAL_GPIO_Init+0x50>
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d031      	beq.n	800154a <HAL_GPIO_Init+0xae>
 80014e6:	2b01      	cmp	r3, #1
 80014e8:	d01c      	beq.n	8001524 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80014ea:	e048      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014ec:	2b03      	cmp	r3, #3
 80014ee:	d043      	beq.n	8001578 <HAL_GPIO_Init+0xdc>
 80014f0:	2b11      	cmp	r3, #17
 80014f2:	d01b      	beq.n	800152c <HAL_GPIO_Init+0x90>
          break;
 80014f4:	e043      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80014f6:	4a89      	ldr	r2, [pc, #548]	; (800171c <HAL_GPIO_Init+0x280>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d026      	beq.n	800154a <HAL_GPIO_Init+0xae>
 80014fc:	4a87      	ldr	r2, [pc, #540]	; (800171c <HAL_GPIO_Init+0x280>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d806      	bhi.n	8001510 <HAL_GPIO_Init+0x74>
 8001502:	4a87      	ldr	r2, [pc, #540]	; (8001720 <HAL_GPIO_Init+0x284>)
 8001504:	4293      	cmp	r3, r2
 8001506:	d020      	beq.n	800154a <HAL_GPIO_Init+0xae>
 8001508:	4a86      	ldr	r2, [pc, #536]	; (8001724 <HAL_GPIO_Init+0x288>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d01d      	beq.n	800154a <HAL_GPIO_Init+0xae>
          break;
 800150e:	e036      	b.n	800157e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001510:	4a85      	ldr	r2, [pc, #532]	; (8001728 <HAL_GPIO_Init+0x28c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d019      	beq.n	800154a <HAL_GPIO_Init+0xae>
 8001516:	4a85      	ldr	r2, [pc, #532]	; (800172c <HAL_GPIO_Init+0x290>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d016      	beq.n	800154a <HAL_GPIO_Init+0xae>
 800151c:	4a84      	ldr	r2, [pc, #528]	; (8001730 <HAL_GPIO_Init+0x294>)
 800151e:	4293      	cmp	r3, r2
 8001520:	d013      	beq.n	800154a <HAL_GPIO_Init+0xae>
          break;
 8001522:	e02c      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	68db      	ldr	r3, [r3, #12]
 8001528:	623b      	str	r3, [r7, #32]
          break;
 800152a:	e028      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	68db      	ldr	r3, [r3, #12]
 8001530:	3304      	adds	r3, #4
 8001532:	623b      	str	r3, [r7, #32]
          break;
 8001534:	e023      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	68db      	ldr	r3, [r3, #12]
 800153a:	3308      	adds	r3, #8
 800153c:	623b      	str	r3, [r7, #32]
          break;
 800153e:	e01e      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	330c      	adds	r3, #12
 8001546:	623b      	str	r3, [r7, #32]
          break;
 8001548:	e019      	b.n	800157e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800154a:	683b      	ldr	r3, [r7, #0]
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d102      	bne.n	8001558 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001552:	2304      	movs	r3, #4
 8001554:	623b      	str	r3, [r7, #32]
          break;
 8001556:	e012      	b.n	800157e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001558:	683b      	ldr	r3, [r7, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b01      	cmp	r3, #1
 800155e:	d105      	bne.n	800156c <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	69fa      	ldr	r2, [r7, #28]
 8001568:	611a      	str	r2, [r3, #16]
          break;
 800156a:	e008      	b.n	800157e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800156c:	2308      	movs	r3, #8
 800156e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	69fa      	ldr	r2, [r7, #28]
 8001574:	615a      	str	r2, [r3, #20]
          break;
 8001576:	e002      	b.n	800157e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001578:	2300      	movs	r3, #0
 800157a:	623b      	str	r3, [r7, #32]
          break;
 800157c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800157e:	69bb      	ldr	r3, [r7, #24]
 8001580:	2bff      	cmp	r3, #255	; 0xff
 8001582:	d801      	bhi.n	8001588 <HAL_GPIO_Init+0xec>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	e001      	b.n	800158c <HAL_GPIO_Init+0xf0>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	3304      	adds	r3, #4
 800158c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800158e:	69bb      	ldr	r3, [r7, #24]
 8001590:	2bff      	cmp	r3, #255	; 0xff
 8001592:	d802      	bhi.n	800159a <HAL_GPIO_Init+0xfe>
 8001594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001596:	009b      	lsls	r3, r3, #2
 8001598:	e002      	b.n	80015a0 <HAL_GPIO_Init+0x104>
 800159a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800159c:	3b08      	subs	r3, #8
 800159e:	009b      	lsls	r3, r3, #2
 80015a0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	681a      	ldr	r2, [r3, #0]
 80015a6:	210f      	movs	r1, #15
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43db      	mvns	r3, r3
 80015b0:	401a      	ands	r2, r3
 80015b2:	6a39      	ldr	r1, [r7, #32]
 80015b4:	693b      	ldr	r3, [r7, #16]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	431a      	orrs	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 8096 	beq.w	80016fa <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80015ce:	4b59      	ldr	r3, [pc, #356]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015d0:	699b      	ldr	r3, [r3, #24]
 80015d2:	4a58      	ldr	r2, [pc, #352]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6193      	str	r3, [r2, #24]
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_GPIO_Init+0x298>)
 80015dc:	699b      	ldr	r3, [r3, #24]
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80015e6:	4a54      	ldr	r2, [pc, #336]	; (8001738 <HAL_GPIO_Init+0x29c>)
 80015e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ea:	089b      	lsrs	r3, r3, #2
 80015ec:	3302      	adds	r3, #2
 80015ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f2:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80015f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015f6:	f003 0303 	and.w	r3, r3, #3
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	220f      	movs	r2, #15
 80015fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001602:	43db      	mvns	r3, r3
 8001604:	68fa      	ldr	r2, [r7, #12]
 8001606:	4013      	ands	r3, r2
 8001608:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4a4b      	ldr	r2, [pc, #300]	; (800173c <HAL_GPIO_Init+0x2a0>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d013      	beq.n	800163a <HAL_GPIO_Init+0x19e>
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4a4a      	ldr	r2, [pc, #296]	; (8001740 <HAL_GPIO_Init+0x2a4>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d00d      	beq.n	8001636 <HAL_GPIO_Init+0x19a>
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2a8>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d007      	beq.n	8001632 <HAL_GPIO_Init+0x196>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a48      	ldr	r2, [pc, #288]	; (8001748 <HAL_GPIO_Init+0x2ac>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d101      	bne.n	800162e <HAL_GPIO_Init+0x192>
 800162a:	2303      	movs	r3, #3
 800162c:	e006      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 800162e:	2304      	movs	r3, #4
 8001630:	e004      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 8001632:	2302      	movs	r3, #2
 8001634:	e002      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 8001636:	2301      	movs	r3, #1
 8001638:	e000      	b.n	800163c <HAL_GPIO_Init+0x1a0>
 800163a:	2300      	movs	r3, #0
 800163c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800163e:	f002 0203 	and.w	r2, r2, #3
 8001642:	0092      	lsls	r2, r2, #2
 8001644:	4093      	lsls	r3, r2
 8001646:	68fa      	ldr	r2, [r7, #12]
 8001648:	4313      	orrs	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800164c:	493a      	ldr	r1, [pc, #232]	; (8001738 <HAL_GPIO_Init+0x29c>)
 800164e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3302      	adds	r3, #2
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800165a:	683b      	ldr	r3, [r7, #0]
 800165c:	685b      	ldr	r3, [r3, #4]
 800165e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001662:	2b00      	cmp	r3, #0
 8001664:	d006      	beq.n	8001674 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001666:	4b39      	ldr	r3, [pc, #228]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	4938      	ldr	r1, [pc, #224]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800166c:	69bb      	ldr	r3, [r7, #24]
 800166e:	4313      	orrs	r3, r2
 8001670:	600b      	str	r3, [r1, #0]
 8001672:	e006      	b.n	8001682 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001674:	4b35      	ldr	r3, [pc, #212]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	69bb      	ldr	r3, [r7, #24]
 800167a:	43db      	mvns	r3, r3
 800167c:	4933      	ldr	r1, [pc, #204]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800168e:	4b2f      	ldr	r3, [pc, #188]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001690:	685a      	ldr	r2, [r3, #4]
 8001692:	492e      	ldr	r1, [pc, #184]	; (800174c <HAL_GPIO_Init+0x2b0>)
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	604b      	str	r3, [r1, #4]
 800169a:	e006      	b.n	80016aa <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800169c:	4b2b      	ldr	r3, [pc, #172]	; (800174c <HAL_GPIO_Init+0x2b0>)
 800169e:	685a      	ldr	r2, [r3, #4]
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	43db      	mvns	r3, r3
 80016a4:	4929      	ldr	r1, [pc, #164]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016a6:	4013      	ands	r3, r2
 80016a8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80016aa:	683b      	ldr	r3, [r7, #0]
 80016ac:	685b      	ldr	r3, [r3, #4]
 80016ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d006      	beq.n	80016c4 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80016b6:	4b25      	ldr	r3, [pc, #148]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016b8:	689a      	ldr	r2, [r3, #8]
 80016ba:	4924      	ldr	r1, [pc, #144]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016bc:	69bb      	ldr	r3, [r7, #24]
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
 80016c2:	e006      	b.n	80016d2 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80016c4:	4b21      	ldr	r3, [pc, #132]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016c6:	689a      	ldr	r2, [r3, #8]
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	43db      	mvns	r3, r3
 80016cc:	491f      	ldr	r1, [pc, #124]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016ce:	4013      	ands	r3, r2
 80016d0:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80016d2:	683b      	ldr	r3, [r7, #0]
 80016d4:	685b      	ldr	r3, [r3, #4]
 80016d6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d006      	beq.n	80016ec <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80016de:	4b1b      	ldr	r3, [pc, #108]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016e0:	68da      	ldr	r2, [r3, #12]
 80016e2:	491a      	ldr	r1, [pc, #104]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016e4:	69bb      	ldr	r3, [r7, #24]
 80016e6:	4313      	orrs	r3, r2
 80016e8:	60cb      	str	r3, [r1, #12]
 80016ea:	e006      	b.n	80016fa <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80016ec:	4b17      	ldr	r3, [pc, #92]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016ee:	68da      	ldr	r2, [r3, #12]
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	43db      	mvns	r3, r3
 80016f4:	4915      	ldr	r1, [pc, #84]	; (800174c <HAL_GPIO_Init+0x2b0>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	3301      	adds	r3, #1
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001700:	683b      	ldr	r3, [r7, #0]
 8001702:	681a      	ldr	r2, [r3, #0]
 8001704:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001706:	fa22 f303 	lsr.w	r3, r2, r3
 800170a:	2b00      	cmp	r3, #0
 800170c:	f47f aed0 	bne.w	80014b0 <HAL_GPIO_Init+0x14>
  }
}
 8001710:	bf00      	nop
 8001712:	372c      	adds	r7, #44	; 0x2c
 8001714:	46bd      	mov	sp, r7
 8001716:	bc80      	pop	{r7}
 8001718:	4770      	bx	lr
 800171a:	bf00      	nop
 800171c:	10210000 	.word	0x10210000
 8001720:	10110000 	.word	0x10110000
 8001724:	10120000 	.word	0x10120000
 8001728:	10310000 	.word	0x10310000
 800172c:	10320000 	.word	0x10320000
 8001730:	10220000 	.word	0x10220000
 8001734:	40021000 	.word	0x40021000
 8001738:	40010000 	.word	0x40010000
 800173c:	40010800 	.word	0x40010800
 8001740:	40010c00 	.word	0x40010c00
 8001744:	40011000 	.word	0x40011000
 8001748:	40011400 	.word	0x40011400
 800174c:	40010400 	.word	0x40010400

08001750 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	460b      	mov	r3, r1
 800175a:	807b      	strh	r3, [r7, #2]
 800175c:	4613      	mov	r3, r2
 800175e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001760:	787b      	ldrb	r3, [r7, #1]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001766:	887a      	ldrh	r2, [r7, #2]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800176c:	e003      	b.n	8001776 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800176e:	887b      	ldrh	r3, [r7, #2]
 8001770:	041a      	lsls	r2, r3, #16
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	611a      	str	r2, [r3, #16]
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	bc80      	pop	{r7}
 800177e:	4770      	bx	lr

08001780 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b084      	sub	sp, #16
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d101      	bne.n	8001792 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800178e:	2301      	movs	r3, #1
 8001790:	e11f      	b.n	80019d2 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001798:	b2db      	uxtb	r3, r3
 800179a:	2b00      	cmp	r3, #0
 800179c:	d106      	bne.n	80017ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80017a6:	6878      	ldr	r0, [r7, #4]
 80017a8:	f7ff f8d0 	bl	800094c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	2224      	movs	r2, #36	; 0x24
 80017b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f022 0201 	bic.w	r2, r2, #1
 80017c2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	681a      	ldr	r2, [r3, #0]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80017d2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80017e2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80017e4:	f000 fcda 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 80017e8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	4a7b      	ldr	r2, [pc, #492]	; (80019dc <HAL_I2C_Init+0x25c>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d807      	bhi.n	8001804 <HAL_I2C_Init+0x84>
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	4a7a      	ldr	r2, [pc, #488]	; (80019e0 <HAL_I2C_Init+0x260>)
 80017f8:	4293      	cmp	r3, r2
 80017fa:	bf94      	ite	ls
 80017fc:	2301      	movls	r3, #1
 80017fe:	2300      	movhi	r3, #0
 8001800:	b2db      	uxtb	r3, r3
 8001802:	e006      	b.n	8001812 <HAL_I2C_Init+0x92>
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	4a77      	ldr	r2, [pc, #476]	; (80019e4 <HAL_I2C_Init+0x264>)
 8001808:	4293      	cmp	r3, r2
 800180a:	bf94      	ite	ls
 800180c:	2301      	movls	r3, #1
 800180e:	2300      	movhi	r3, #0
 8001810:	b2db      	uxtb	r3, r3
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001816:	2301      	movs	r3, #1
 8001818:	e0db      	b.n	80019d2 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	4a72      	ldr	r2, [pc, #456]	; (80019e8 <HAL_I2C_Init+0x268>)
 800181e:	fba2 2303 	umull	r2, r3, r2, r3
 8001822:	0c9b      	lsrs	r3, r3, #18
 8001824:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	68ba      	ldr	r2, [r7, #8]
 8001836:	430a      	orrs	r2, r1
 8001838:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	6a1b      	ldr	r3, [r3, #32]
 8001840:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	4a64      	ldr	r2, [pc, #400]	; (80019dc <HAL_I2C_Init+0x25c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d802      	bhi.n	8001854 <HAL_I2C_Init+0xd4>
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	3301      	adds	r3, #1
 8001852:	e009      	b.n	8001868 <HAL_I2C_Init+0xe8>
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800185a:	fb02 f303 	mul.w	r3, r2, r3
 800185e:	4a63      	ldr	r2, [pc, #396]	; (80019ec <HAL_I2C_Init+0x26c>)
 8001860:	fba2 2303 	umull	r2, r3, r2, r3
 8001864:	099b      	lsrs	r3, r3, #6
 8001866:	3301      	adds	r3, #1
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6812      	ldr	r2, [r2, #0]
 800186c:	430b      	orrs	r3, r1
 800186e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800187a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4956      	ldr	r1, [pc, #344]	; (80019dc <HAL_I2C_Init+0x25c>)
 8001884:	428b      	cmp	r3, r1
 8001886:	d80d      	bhi.n	80018a4 <HAL_I2C_Init+0x124>
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	1e59      	subs	r1, r3, #1
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	005b      	lsls	r3, r3, #1
 8001892:	fbb1 f3f3 	udiv	r3, r1, r3
 8001896:	3301      	adds	r3, #1
 8001898:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800189c:	2b04      	cmp	r3, #4
 800189e:	bf38      	it	cc
 80018a0:	2304      	movcc	r3, #4
 80018a2:	e04f      	b.n	8001944 <HAL_I2C_Init+0x1c4>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	689b      	ldr	r3, [r3, #8]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d111      	bne.n	80018d0 <HAL_I2C_Init+0x150>
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	1e58      	subs	r0, r3, #1
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6859      	ldr	r1, [r3, #4]
 80018b4:	460b      	mov	r3, r1
 80018b6:	005b      	lsls	r3, r3, #1
 80018b8:	440b      	add	r3, r1
 80018ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80018be:	3301      	adds	r3, #1
 80018c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e012      	b.n	80018f6 <HAL_I2C_Init+0x176>
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	1e58      	subs	r0, r3, #1
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6859      	ldr	r1, [r3, #4]
 80018d8:	460b      	mov	r3, r1
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	440b      	add	r3, r1
 80018de:	0099      	lsls	r1, r3, #2
 80018e0:	440b      	add	r3, r1
 80018e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80018e6:	3301      	adds	r3, #1
 80018e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	bf0c      	ite	eq
 80018f0:	2301      	moveq	r3, #1
 80018f2:	2300      	movne	r3, #0
 80018f4:	b2db      	uxtb	r3, r3
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_I2C_Init+0x17e>
 80018fa:	2301      	movs	r3, #1
 80018fc:	e022      	b.n	8001944 <HAL_I2C_Init+0x1c4>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d10e      	bne.n	8001924 <HAL_I2C_Init+0x1a4>
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	1e58      	subs	r0, r3, #1
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6859      	ldr	r1, [r3, #4]
 800190e:	460b      	mov	r3, r1
 8001910:	005b      	lsls	r3, r3, #1
 8001912:	440b      	add	r3, r1
 8001914:	fbb0 f3f3 	udiv	r3, r0, r3
 8001918:	3301      	adds	r3, #1
 800191a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800191e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001922:	e00f      	b.n	8001944 <HAL_I2C_Init+0x1c4>
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	1e58      	subs	r0, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6859      	ldr	r1, [r3, #4]
 800192c:	460b      	mov	r3, r1
 800192e:	009b      	lsls	r3, r3, #2
 8001930:	440b      	add	r3, r1
 8001932:	0099      	lsls	r1, r3, #2
 8001934:	440b      	add	r3, r1
 8001936:	fbb0 f3f3 	udiv	r3, r0, r3
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001940:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001944:	6879      	ldr	r1, [r7, #4]
 8001946:	6809      	ldr	r1, [r1, #0]
 8001948:	4313      	orrs	r3, r2
 800194a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69da      	ldr	r2, [r3, #28]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6a1b      	ldr	r3, [r3, #32]
 800195e:	431a      	orrs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	430a      	orrs	r2, r1
 8001966:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001972:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001976:	687a      	ldr	r2, [r7, #4]
 8001978:	6911      	ldr	r1, [r2, #16]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	68d2      	ldr	r2, [r2, #12]
 800197e:	4311      	orrs	r1, r2
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	430b      	orrs	r3, r1
 8001986:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	68db      	ldr	r3, [r3, #12]
 800198e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	695a      	ldr	r2, [r3, #20]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	431a      	orrs	r2, r3
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	430a      	orrs	r2, r1
 80019a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2200      	movs	r2, #0
 80019b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2220      	movs	r2, #32
 80019be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	2200      	movs	r2, #0
 80019c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3710      	adds	r7, #16
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	000186a0 	.word	0x000186a0
 80019e0:	001e847f 	.word	0x001e847f
 80019e4:	003d08ff 	.word	0x003d08ff
 80019e8:	431bde83 	.word	0x431bde83
 80019ec:	10624dd3 	.word	0x10624dd3

080019f0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d101      	bne.n	8001a02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e26c      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	f000 8087 	beq.w	8001b1e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a10:	4b92      	ldr	r3, [pc, #584]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a12:	685b      	ldr	r3, [r3, #4]
 8001a14:	f003 030c 	and.w	r3, r3, #12
 8001a18:	2b04      	cmp	r3, #4
 8001a1a:	d00c      	beq.n	8001a36 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001a1c:	4b8f      	ldr	r3, [pc, #572]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f003 030c 	and.w	r3, r3, #12
 8001a24:	2b08      	cmp	r3, #8
 8001a26:	d112      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5e>
 8001a28:	4b8c      	ldr	r3, [pc, #560]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a2a:	685b      	ldr	r3, [r3, #4]
 8001a2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a34:	d10b      	bne.n	8001a4e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a36:	4b89      	ldr	r3, [pc, #548]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d06c      	beq.n	8001b1c <HAL_RCC_OscConfig+0x12c>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	685b      	ldr	r3, [r3, #4]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d168      	bne.n	8001b1c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e246      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a56:	d106      	bne.n	8001a66 <HAL_RCC_OscConfig+0x76>
 8001a58:	4b80      	ldr	r3, [pc, #512]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a7f      	ldr	r2, [pc, #508]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a62:	6013      	str	r3, [r2, #0]
 8001a64:	e02e      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d10c      	bne.n	8001a88 <HAL_RCC_OscConfig+0x98>
 8001a6e:	4b7b      	ldr	r3, [pc, #492]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a7a      	ldr	r2, [pc, #488]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a78:	6013      	str	r3, [r2, #0]
 8001a7a:	4b78      	ldr	r3, [pc, #480]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a77      	ldr	r2, [pc, #476]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001a84:	6013      	str	r3, [r2, #0]
 8001a86:	e01d      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a90:	d10c      	bne.n	8001aac <HAL_RCC_OscConfig+0xbc>
 8001a92:	4b72      	ldr	r3, [pc, #456]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a71      	ldr	r2, [pc, #452]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001a98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a9c:	6013      	str	r3, [r2, #0]
 8001a9e:	4b6f      	ldr	r3, [pc, #444]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a6e      	ldr	r2, [pc, #440]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa8:	6013      	str	r3, [r2, #0]
 8001aaa:	e00b      	b.n	8001ac4 <HAL_RCC_OscConfig+0xd4>
 8001aac:	4b6b      	ldr	r3, [pc, #428]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a6a      	ldr	r2, [pc, #424]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ab6:	6013      	str	r3, [r2, #0]
 8001ab8:	4b68      	ldr	r3, [pc, #416]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a67      	ldr	r2, [pc, #412]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ac2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d013      	beq.n	8001af4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001acc:	f7ff f9ee 	bl	8000eac <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ad2:	e008      	b.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f9ea 	bl	8000eac <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	2b64      	cmp	r3, #100	; 0x64
 8001ae0:	d901      	bls.n	8001ae6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e1fa      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ae6:	4b5d      	ldr	r3, [pc, #372]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d0f0      	beq.n	8001ad4 <HAL_RCC_OscConfig+0xe4>
 8001af2:	e014      	b.n	8001b1e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af4:	f7ff f9da 	bl	8000eac <HAL_GetTick>
 8001af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001afa:	e008      	b.n	8001b0e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001afc:	f7ff f9d6 	bl	8000eac <HAL_GetTick>
 8001b00:	4602      	mov	r2, r0
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	1ad3      	subs	r3, r2, r3
 8001b06:	2b64      	cmp	r3, #100	; 0x64
 8001b08:	d901      	bls.n	8001b0e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e1e6      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b0e:	4b53      	ldr	r3, [pc, #332]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d1f0      	bne.n	8001afc <HAL_RCC_OscConfig+0x10c>
 8001b1a:	e000      	b.n	8001b1e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f003 0302 	and.w	r3, r3, #2
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d063      	beq.n	8001bf2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	f003 030c 	and.w	r3, r3, #12
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d00b      	beq.n	8001b4e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001b36:	4b49      	ldr	r3, [pc, #292]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	f003 030c 	and.w	r3, r3, #12
 8001b3e:	2b08      	cmp	r3, #8
 8001b40:	d11c      	bne.n	8001b7c <HAL_RCC_OscConfig+0x18c>
 8001b42:	4b46      	ldr	r3, [pc, #280]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d116      	bne.n	8001b7c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b4e:	4b43      	ldr	r3, [pc, #268]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d005      	beq.n	8001b66 <HAL_RCC_OscConfig+0x176>
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	691b      	ldr	r3, [r3, #16]
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d001      	beq.n	8001b66 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001b62:	2301      	movs	r3, #1
 8001b64:	e1ba      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b66:	4b3d      	ldr	r3, [pc, #244]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4939      	ldr	r1, [pc, #228]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001b76:	4313      	orrs	r3, r2
 8001b78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001b7a:	e03a      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d020      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b84:	4b36      	ldr	r3, [pc, #216]	; (8001c60 <HAL_RCC_OscConfig+0x270>)
 8001b86:	2201      	movs	r2, #1
 8001b88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b8a:	f7ff f98f 	bl	8000eac <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff f98b 	bl	8000eac <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e19b      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba4:	4b2d      	ldr	r3, [pc, #180]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f003 0302 	and.w	r3, r3, #2
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b2a      	ldr	r3, [pc, #168]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	00db      	lsls	r3, r3, #3
 8001bbe:	4927      	ldr	r1, [pc, #156]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	600b      	str	r3, [r1, #0]
 8001bc4:	e015      	b.n	8001bf2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	4b26      	ldr	r3, [pc, #152]	; (8001c60 <HAL_RCC_OscConfig+0x270>)
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bcc:	f7ff f96e 	bl	8000eac <HAL_GetTick>
 8001bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bd4:	f7ff f96a 	bl	8000eac <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	693b      	ldr	r3, [r7, #16]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e17a      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001be6:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f003 0302 	and.w	r3, r3, #2
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d1f0      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f003 0308 	and.w	r3, r3, #8
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d03a      	beq.n	8001c74 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699b      	ldr	r3, [r3, #24]
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d019      	beq.n	8001c3a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_RCC_OscConfig+0x274>)
 8001c08:	2201      	movs	r2, #1
 8001c0a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0c:	f7ff f94e 	bl	8000eac <HAL_GetTick>
 8001c10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c12:	e008      	b.n	8001c26 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c14:	f7ff f94a 	bl	8000eac <HAL_GetTick>
 8001c18:	4602      	mov	r2, r0
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	1ad3      	subs	r3, r2, r3
 8001c1e:	2b02      	cmp	r3, #2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e15a      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c26:	4b0d      	ldr	r3, [pc, #52]	; (8001c5c <HAL_RCC_OscConfig+0x26c>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d0f0      	beq.n	8001c14 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f000 fada 	bl	80021ec <RCC_Delay>
 8001c38:	e01c      	b.n	8001c74 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c3a:	4b0a      	ldr	r3, [pc, #40]	; (8001c64 <HAL_RCC_OscConfig+0x274>)
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c40:	f7ff f934 	bl	8000eac <HAL_GetTick>
 8001c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c46:	e00f      	b.n	8001c68 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c48:	f7ff f930 	bl	8000eac <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d908      	bls.n	8001c68 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e140      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
 8001c5a:	bf00      	nop
 8001c5c:	40021000 	.word	0x40021000
 8001c60:	42420000 	.word	0x42420000
 8001c64:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001c68:	4b9e      	ldr	r3, [pc, #632]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001c6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c6c:	f003 0302 	and.w	r3, r3, #2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1e9      	bne.n	8001c48 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f003 0304 	and.w	r3, r3, #4
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	f000 80a6 	beq.w	8001dce <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c82:	2300      	movs	r3, #0
 8001c84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c86:	4b97      	ldr	r3, [pc, #604]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001c88:	69db      	ldr	r3, [r3, #28]
 8001c8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d10d      	bne.n	8001cae <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c92:	4b94      	ldr	r3, [pc, #592]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001c94:	69db      	ldr	r3, [r3, #28]
 8001c96:	4a93      	ldr	r2, [pc, #588]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c9c:	61d3      	str	r3, [r2, #28]
 8001c9e:	4b91      	ldr	r3, [pc, #580]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001ca0:	69db      	ldr	r3, [r3, #28]
 8001ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	60bb      	str	r3, [r7, #8]
 8001ca8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001caa:	2301      	movs	r3, #1
 8001cac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001cae:	4b8e      	ldr	r3, [pc, #568]	; (8001ee8 <HAL_RCC_OscConfig+0x4f8>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d118      	bne.n	8001cec <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001cba:	4b8b      	ldr	r3, [pc, #556]	; (8001ee8 <HAL_RCC_OscConfig+0x4f8>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a8a      	ldr	r2, [pc, #552]	; (8001ee8 <HAL_RCC_OscConfig+0x4f8>)
 8001cc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f8f1 	bl	8000eac <HAL_GetTick>
 8001cca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ccc:	e008      	b.n	8001ce0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cce:	f7ff f8ed 	bl	8000eac <HAL_GetTick>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	2b64      	cmp	r3, #100	; 0x64
 8001cda:	d901      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001cdc:	2303      	movs	r3, #3
 8001cde:	e0fd      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ce0:	4b81      	ldr	r3, [pc, #516]	; (8001ee8 <HAL_RCC_OscConfig+0x4f8>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d0f0      	beq.n	8001cce <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d106      	bne.n	8001d02 <HAL_RCC_OscConfig+0x312>
 8001cf4:	4b7b      	ldr	r3, [pc, #492]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001cf6:	6a1b      	ldr	r3, [r3, #32]
 8001cf8:	4a7a      	ldr	r2, [pc, #488]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001cfa:	f043 0301 	orr.w	r3, r3, #1
 8001cfe:	6213      	str	r3, [r2, #32]
 8001d00:	e02d      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d10c      	bne.n	8001d24 <HAL_RCC_OscConfig+0x334>
 8001d0a:	4b76      	ldr	r3, [pc, #472]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4a75      	ldr	r2, [pc, #468]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d10:	f023 0301 	bic.w	r3, r3, #1
 8001d14:	6213      	str	r3, [r2, #32]
 8001d16:	4b73      	ldr	r3, [pc, #460]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d18:	6a1b      	ldr	r3, [r3, #32]
 8001d1a:	4a72      	ldr	r2, [pc, #456]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d1c:	f023 0304 	bic.w	r3, r3, #4
 8001d20:	6213      	str	r3, [r2, #32]
 8001d22:	e01c      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b05      	cmp	r3, #5
 8001d2a:	d10c      	bne.n	8001d46 <HAL_RCC_OscConfig+0x356>
 8001d2c:	4b6d      	ldr	r3, [pc, #436]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d2e:	6a1b      	ldr	r3, [r3, #32]
 8001d30:	4a6c      	ldr	r2, [pc, #432]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d32:	f043 0304 	orr.w	r3, r3, #4
 8001d36:	6213      	str	r3, [r2, #32]
 8001d38:	4b6a      	ldr	r3, [pc, #424]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3a:	6a1b      	ldr	r3, [r3, #32]
 8001d3c:	4a69      	ldr	r2, [pc, #420]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d3e:	f043 0301 	orr.w	r3, r3, #1
 8001d42:	6213      	str	r3, [r2, #32]
 8001d44:	e00b      	b.n	8001d5e <HAL_RCC_OscConfig+0x36e>
 8001d46:	4b67      	ldr	r3, [pc, #412]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d48:	6a1b      	ldr	r3, [r3, #32]
 8001d4a:	4a66      	ldr	r2, [pc, #408]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	6213      	str	r3, [r2, #32]
 8001d52:	4b64      	ldr	r3, [pc, #400]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d54:	6a1b      	ldr	r3, [r3, #32]
 8001d56:	4a63      	ldr	r2, [pc, #396]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d58:	f023 0304 	bic.w	r3, r3, #4
 8001d5c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	68db      	ldr	r3, [r3, #12]
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d015      	beq.n	8001d92 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d66:	f7ff f8a1 	bl	8000eac <HAL_GetTick>
 8001d6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d6c:	e00a      	b.n	8001d84 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d6e:	f7ff f89d 	bl	8000eac <HAL_GetTick>
 8001d72:	4602      	mov	r2, r0
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d901      	bls.n	8001d84 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001d80:	2303      	movs	r3, #3
 8001d82:	e0ab      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001d84:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001d86:	6a1b      	ldr	r3, [r3, #32]
 8001d88:	f003 0302 	and.w	r3, r3, #2
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d0ee      	beq.n	8001d6e <HAL_RCC_OscConfig+0x37e>
 8001d90:	e014      	b.n	8001dbc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d92:	f7ff f88b 	bl	8000eac <HAL_GetTick>
 8001d96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d98:	e00a      	b.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d9a:	f7ff f887 	bl	8000eac <HAL_GetTick>
 8001d9e:	4602      	mov	r2, r0
 8001da0:	693b      	ldr	r3, [r7, #16]
 8001da2:	1ad3      	subs	r3, r2, r3
 8001da4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d901      	bls.n	8001db0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001dac:	2303      	movs	r3, #3
 8001dae:	e095      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001db0:	4b4c      	ldr	r3, [pc, #304]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001db2:	6a1b      	ldr	r3, [r3, #32]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1ee      	bne.n	8001d9a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001dbc:	7dfb      	ldrb	r3, [r7, #23]
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d105      	bne.n	8001dce <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b48      	ldr	r3, [pc, #288]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001dc4:	69db      	ldr	r3, [r3, #28]
 8001dc6:	4a47      	ldr	r2, [pc, #284]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	69db      	ldr	r3, [r3, #28]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	f000 8081 	beq.w	8001eda <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001dd8:	4b42      	ldr	r3, [pc, #264]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 030c 	and.w	r3, r3, #12
 8001de0:	2b08      	cmp	r3, #8
 8001de2:	d061      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	2b02      	cmp	r3, #2
 8001dea:	d146      	bne.n	8001e7a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dec:	4b3f      	ldr	r3, [pc, #252]	; (8001eec <HAL_RCC_OscConfig+0x4fc>)
 8001dee:	2200      	movs	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7ff f85b 	bl	8000eac <HAL_GetTick>
 8001df6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dfa:	f7ff f857 	bl	8000eac <HAL_GetTick>
 8001dfe:	4602      	mov	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e067      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e0c:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1f0      	bne.n	8001dfa <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6a1b      	ldr	r3, [r3, #32]
 8001e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e20:	d108      	bne.n	8001e34 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001e22:	4b30      	ldr	r3, [pc, #192]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001e24:	685b      	ldr	r3, [r3, #4]
 8001e26:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	492d      	ldr	r1, [pc, #180]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001e30:	4313      	orrs	r3, r2
 8001e32:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e34:	4b2b      	ldr	r3, [pc, #172]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6a19      	ldr	r1, [r3, #32]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e44:	430b      	orrs	r3, r1
 8001e46:	4927      	ldr	r1, [pc, #156]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_RCC_OscConfig+0x4fc>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e52:	f7ff f82b 	bl	8000eac <HAL_GetTick>
 8001e56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e58:	e008      	b.n	8001e6c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e5a:	f7ff f827 	bl	8000eac <HAL_GetTick>
 8001e5e:	4602      	mov	r2, r0
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	1ad3      	subs	r3, r2, r3
 8001e64:	2b02      	cmp	r3, #2
 8001e66:	d901      	bls.n	8001e6c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001e68:	2303      	movs	r3, #3
 8001e6a:	e037      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001e6c:	4b1d      	ldr	r3, [pc, #116]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0f0      	beq.n	8001e5a <HAL_RCC_OscConfig+0x46a>
 8001e78:	e02f      	b.n	8001eda <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e7a:	4b1c      	ldr	r3, [pc, #112]	; (8001eec <HAL_RCC_OscConfig+0x4fc>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e80:	f7ff f814 	bl	8000eac <HAL_GetTick>
 8001e84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e86:	e008      	b.n	8001e9a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e88:	f7ff f810 	bl	8000eac <HAL_GetTick>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	693b      	ldr	r3, [r7, #16]
 8001e90:	1ad3      	subs	r3, r2, r3
 8001e92:	2b02      	cmp	r3, #2
 8001e94:	d901      	bls.n	8001e9a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001e96:	2303      	movs	r3, #3
 8001e98:	e020      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e9a:	4b12      	ldr	r3, [pc, #72]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d1f0      	bne.n	8001e88 <HAL_RCC_OscConfig+0x498>
 8001ea6:	e018      	b.n	8001eda <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	69db      	ldr	r3, [r3, #28]
 8001eac:	2b01      	cmp	r3, #1
 8001eae:	d101      	bne.n	8001eb4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	e013      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001eb4:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <HAL_RCC_OscConfig+0x4f4>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a1b      	ldr	r3, [r3, #32]
 8001ec4:	429a      	cmp	r2, r3
 8001ec6:	d106      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ed2:	429a      	cmp	r2, r3
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40007000 	.word	0x40007000
 8001eec:	42420060 	.word	0x42420060

08001ef0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b084      	sub	sp, #16
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d101      	bne.n	8001f04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e0d0      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001f04:	4b6a      	ldr	r3, [pc, #424]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0307 	and.w	r3, r3, #7
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	429a      	cmp	r2, r3
 8001f10:	d910      	bls.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f12:	4b67      	ldr	r3, [pc, #412]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f023 0207 	bic.w	r2, r3, #7
 8001f1a:	4965      	ldr	r1, [pc, #404]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f22:	4b63      	ldr	r3, [pc, #396]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f003 0307 	and.w	r3, r3, #7
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d001      	beq.n	8001f34 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e0b8      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0302 	and.w	r3, r3, #2
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d020      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0304 	and.w	r3, r3, #4
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d005      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	4a58      	ldr	r2, [pc, #352]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f52:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001f56:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0308 	and.w	r3, r3, #8
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d005      	beq.n	8001f70 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f64:	4b53      	ldr	r3, [pc, #332]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	4a52      	ldr	r2, [pc, #328]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f6a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001f6e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f70:	4b50      	ldr	r3, [pc, #320]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f72:	685b      	ldr	r3, [r3, #4]
 8001f74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	494d      	ldr	r1, [pc, #308]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 0301 	and.w	r3, r3, #1
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d040      	beq.n	8002010 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d107      	bne.n	8001fa6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f96:	4b47      	ldr	r3, [pc, #284]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d115      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	e07f      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	685b      	ldr	r3, [r3, #4]
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d107      	bne.n	8001fbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fae:	4b41      	ldr	r3, [pc, #260]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d109      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fba:	2301      	movs	r3, #1
 8001fbc:	e073      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fbe:	4b3d      	ldr	r3, [pc, #244]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d101      	bne.n	8001fce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fca:	2301      	movs	r3, #1
 8001fcc:	e06b      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fce:	4b39      	ldr	r3, [pc, #228]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f023 0203 	bic.w	r2, r3, #3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4936      	ldr	r1, [pc, #216]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fe0:	f7fe ff64 	bl	8000eac <HAL_GetTick>
 8001fe4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fe6:	e00a      	b.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe8:	f7fe ff60 	bl	8000eac <HAL_GetTick>
 8001fec:	4602      	mov	r2, r0
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d901      	bls.n	8001ffe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ffa:	2303      	movs	r3, #3
 8001ffc:	e053      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ffe:	4b2d      	ldr	r3, [pc, #180]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	f003 020c 	and.w	r2, r3, #12
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	685b      	ldr	r3, [r3, #4]
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	429a      	cmp	r2, r3
 800200e:	d1eb      	bne.n	8001fe8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002010:	4b27      	ldr	r3, [pc, #156]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0307 	and.w	r3, r3, #7
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	429a      	cmp	r2, r3
 800201c:	d210      	bcs.n	8002040 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800201e:	4b24      	ldr	r3, [pc, #144]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f023 0207 	bic.w	r2, r3, #7
 8002026:	4922      	ldr	r1, [pc, #136]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	4313      	orrs	r3, r2
 800202c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202e:	4b20      	ldr	r3, [pc, #128]	; (80020b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0307 	and.w	r3, r3, #7
 8002036:	683a      	ldr	r2, [r7, #0]
 8002038:	429a      	cmp	r2, r3
 800203a:	d001      	beq.n	8002040 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800203c:	2301      	movs	r3, #1
 800203e:	e032      	b.n	80020a6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	d008      	beq.n	800205e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800205a:	4313      	orrs	r3, r2
 800205c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d009      	beq.n	800207e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800206a:	4b12      	ldr	r3, [pc, #72]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	691b      	ldr	r3, [r3, #16]
 8002076:	00db      	lsls	r3, r3, #3
 8002078:	490e      	ldr	r1, [pc, #56]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 800207a:	4313      	orrs	r3, r2
 800207c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800207e:	f000 f821 	bl	80020c4 <HAL_RCC_GetSysClockFreq>
 8002082:	4601      	mov	r1, r0
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	091b      	lsrs	r3, r3, #4
 800208a:	f003 030f 	and.w	r3, r3, #15
 800208e:	4a0a      	ldr	r2, [pc, #40]	; (80020b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002090:	5cd3      	ldrb	r3, [r2, r3]
 8002092:	fa21 f303 	lsr.w	r3, r1, r3
 8002096:	4a09      	ldr	r2, [pc, #36]	; (80020bc <HAL_RCC_ClockConfig+0x1cc>)
 8002098:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800209a:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <HAL_RCC_ClockConfig+0x1d0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fec2 	bl	8000e28 <HAL_InitTick>

  return HAL_OK;
 80020a4:	2300      	movs	r3, #0
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3710      	adds	r7, #16
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40022000 	.word	0x40022000
 80020b4:	40021000 	.word	0x40021000
 80020b8:	08003148 	.word	0x08003148
 80020bc:	20000000 	.word	0x20000000
 80020c0:	20000004 	.word	0x20000004

080020c4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020c4:	b490      	push	{r4, r7}
 80020c6:	b08a      	sub	sp, #40	; 0x28
 80020c8:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80020ca:	4b2a      	ldr	r3, [pc, #168]	; (8002174 <HAL_RCC_GetSysClockFreq+0xb0>)
 80020cc:	1d3c      	adds	r4, r7, #4
 80020ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCC_GetSysClockFreq+0xb4>)
 80020d6:	881b      	ldrh	r3, [r3, #0]
 80020d8:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
 80020de:	2300      	movs	r3, #0
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80020ea:	2300      	movs	r3, #0
 80020ec:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80020ee:	4b23      	ldr	r3, [pc, #140]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	d002      	beq.n	8002104 <HAL_RCC_GetSysClockFreq+0x40>
 80020fe:	2b08      	cmp	r3, #8
 8002100:	d003      	beq.n	800210a <HAL_RCC_GetSysClockFreq+0x46>
 8002102:	e02d      	b.n	8002160 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002104:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002106:	623b      	str	r3, [r7, #32]
      break;
 8002108:	e02d      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	0c9b      	lsrs	r3, r3, #18
 800210e:	f003 030f 	and.w	r3, r3, #15
 8002112:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002116:	4413      	add	r3, r2
 8002118:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800211c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d013      	beq.n	8002150 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002128:	4b14      	ldr	r3, [pc, #80]	; (800217c <HAL_RCC_GetSysClockFreq+0xb8>)
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	0c5b      	lsrs	r3, r3, #17
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002136:	4413      	add	r3, r2
 8002138:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800213c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800213e:	697b      	ldr	r3, [r7, #20]
 8002140:	4a0f      	ldr	r2, [pc, #60]	; (8002180 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002142:	fb02 f203 	mul.w	r2, r2, r3
 8002146:	69bb      	ldr	r3, [r7, #24]
 8002148:	fbb2 f3f3 	udiv	r3, r2, r3
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
 800214e:	e004      	b.n	800215a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	4a0c      	ldr	r2, [pc, #48]	; (8002184 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002154:	fb02 f303 	mul.w	r3, r2, r3
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	623b      	str	r3, [r7, #32]
      break;
 800215e:	e002      	b.n	8002166 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002160:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002162:	623b      	str	r3, [r7, #32]
      break;
 8002164:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002166:	6a3b      	ldr	r3, [r7, #32]
}
 8002168:	4618      	mov	r0, r3
 800216a:	3728      	adds	r7, #40	; 0x28
 800216c:	46bd      	mov	sp, r7
 800216e:	bc90      	pop	{r4, r7}
 8002170:	4770      	bx	lr
 8002172:	bf00      	nop
 8002174:	08003134 	.word	0x08003134
 8002178:	08003144 	.word	0x08003144
 800217c:	40021000 	.word	0x40021000
 8002180:	007a1200 	.word	0x007a1200
 8002184:	003d0900 	.word	0x003d0900

08002188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800218c:	4b02      	ldr	r3, [pc, #8]	; (8002198 <HAL_RCC_GetHCLKFreq+0x10>)
 800218e:	681b      	ldr	r3, [r3, #0]
}
 8002190:	4618      	mov	r0, r3
 8002192:	46bd      	mov	sp, r7
 8002194:	bc80      	pop	{r7}
 8002196:	4770      	bx	lr
 8002198:	20000000 	.word	0x20000000

0800219c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a0:	f7ff fff2 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021a4:	4601      	mov	r1, r0
 80021a6:	4b05      	ldr	r3, [pc, #20]	; (80021bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	0a1b      	lsrs	r3, r3, #8
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	4a03      	ldr	r2, [pc, #12]	; (80021c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021b2:	5cd3      	ldrb	r3, [r2, r3]
 80021b4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	bd80      	pop	{r7, pc}
 80021bc:	40021000 	.word	0x40021000
 80021c0:	08003158 	.word	0x08003158

080021c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021c4:	b580      	push	{r7, lr}
 80021c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021c8:	f7ff ffde 	bl	8002188 <HAL_RCC_GetHCLKFreq>
 80021cc:	4601      	mov	r1, r0
 80021ce:	4b05      	ldr	r3, [pc, #20]	; (80021e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	0adb      	lsrs	r3, r3, #11
 80021d4:	f003 0307 	and.w	r3, r3, #7
 80021d8:	4a03      	ldr	r2, [pc, #12]	; (80021e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021da:	5cd3      	ldrb	r3, [r2, r3]
 80021dc:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40021000 	.word	0x40021000
 80021e8:	08003158 	.word	0x08003158

080021ec <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80021ec:	b480      	push	{r7}
 80021ee:	b085      	sub	sp, #20
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80021f4:	4b0a      	ldr	r3, [pc, #40]	; (8002220 <RCC_Delay+0x34>)
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	4a0a      	ldr	r2, [pc, #40]	; (8002224 <RCC_Delay+0x38>)
 80021fa:	fba2 2303 	umull	r2, r3, r2, r3
 80021fe:	0a5b      	lsrs	r3, r3, #9
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	fb02 f303 	mul.w	r3, r2, r3
 8002206:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002208:	bf00      	nop
  }
  while (Delay --);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	1e5a      	subs	r2, r3, #1
 800220e:	60fa      	str	r2, [r7, #12]
 8002210:	2b00      	cmp	r3, #0
 8002212:	d1f9      	bne.n	8002208 <RCC_Delay+0x1c>
}
 8002214:	bf00      	nop
 8002216:	3714      	adds	r7, #20
 8002218:	46bd      	mov	sp, r7
 800221a:	bc80      	pop	{r7}
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	20000000 	.word	0x20000000
 8002224:	10624dd3 	.word	0x10624dd3

08002228 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b086      	sub	sp, #24
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002230:	2300      	movs	r3, #0
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	2300      	movs	r3, #0
 8002236:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d07d      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002244:	2300      	movs	r3, #0
 8002246:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002248:	4b4f      	ldr	r3, [pc, #316]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800224a:	69db      	ldr	r3, [r3, #28]
 800224c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10d      	bne.n	8002270 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002254:	4b4c      	ldr	r3, [pc, #304]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002256:	69db      	ldr	r3, [r3, #28]
 8002258:	4a4b      	ldr	r2, [pc, #300]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800225a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800225e:	61d3      	str	r3, [r2, #28]
 8002260:	4b49      	ldr	r3, [pc, #292]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002262:	69db      	ldr	r3, [r3, #28]
 8002264:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002268:	60bb      	str	r3, [r7, #8]
 800226a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800226c:	2301      	movs	r3, #1
 800226e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002270:	4b46      	ldr	r3, [pc, #280]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002278:	2b00      	cmp	r3, #0
 800227a:	d118      	bne.n	80022ae <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800227c:	4b43      	ldr	r3, [pc, #268]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a42      	ldr	r2, [pc, #264]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002282:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002286:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002288:	f7fe fe10 	bl	8000eac <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228e:	e008      	b.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002290:	f7fe fe0c 	bl	8000eac <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b64      	cmp	r3, #100	; 0x64
 800229c:	d901      	bls.n	80022a2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e06d      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a2:	4b3a      	ldr	r3, [pc, #232]	; (800238c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80022ae:	4b36      	ldr	r3, [pc, #216]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022b0:	6a1b      	ldr	r3, [r3, #32]
 80022b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022b6:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d02e      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c6:	68fa      	ldr	r2, [r7, #12]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d027      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80022cc:	4b2e      	ldr	r3, [pc, #184]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	6a1b      	ldr	r3, [r3, #32]
 80022d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80022d4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80022d6:	4b2e      	ldr	r3, [pc, #184]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022d8:	2201      	movs	r2, #1
 80022da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80022dc:	4b2c      	ldr	r3, [pc, #176]	; (8002390 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80022de:	2200      	movs	r2, #0
 80022e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80022e2:	4a29      	ldr	r2, [pc, #164]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d014      	beq.n	800231c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f2:	f7fe fddb 	bl	8000eac <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022f8:	e00a      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022fa:	f7fe fdd7 	bl	8000eac <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	f241 3288 	movw	r2, #5000	; 0x1388
 8002308:	4293      	cmp	r3, r2
 800230a:	d901      	bls.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e036      	b.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002310:	4b1d      	ldr	r3, [pc, #116]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002312:	6a1b      	ldr	r3, [r3, #32]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d0ee      	beq.n	80022fa <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800231c:	4b1a      	ldr	r3, [pc, #104]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	4917      	ldr	r1, [pc, #92]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	4313      	orrs	r3, r2
 800232c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800232e:	7dfb      	ldrb	r3, [r7, #23]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d105      	bne.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002334:	4b14      	ldr	r3, [pc, #80]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	4a13      	ldr	r2, [pc, #76]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800233a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800233e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0302 	and.w	r3, r3, #2
 8002348:	2b00      	cmp	r3, #0
 800234a:	d008      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800234c:	4b0e      	ldr	r3, [pc, #56]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	490b      	ldr	r1, [pc, #44]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800235a:	4313      	orrs	r3, r2
 800235c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f003 0310 	and.w	r3, r3, #16
 8002366:	2b00      	cmp	r3, #0
 8002368:	d008      	beq.n	800237c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800236a:	4b07      	ldr	r3, [pc, #28]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	68db      	ldr	r3, [r3, #12]
 8002376:	4904      	ldr	r1, [pc, #16]	; (8002388 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002378:	4313      	orrs	r3, r2
 800237a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40021000 	.word	0x40021000
 800238c:	40007000 	.word	0x40007000
 8002390:	42420440 	.word	0x42420440

08002394 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d101      	bne.n	80023a6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e076      	b.n	8002494 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d108      	bne.n	80023c0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80023b6:	d009      	beq.n	80023cc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	2200      	movs	r2, #0
 80023bc:	61da      	str	r2, [r3, #28]
 80023be:	e005      	b.n	80023cc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d106      	bne.n	80023ec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80023e6:	6878      	ldr	r0, [r7, #4]
 80023e8:	f7fe fb00 	bl	80009ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	2202      	movs	r2, #2
 80023f0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	681a      	ldr	r2, [r3, #0]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002402:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	68db      	ldr	r3, [r3, #12]
 800241a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800241e:	431a      	orrs	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f003 0302 	and.w	r3, r3, #2
 8002428:	431a      	orrs	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	695b      	ldr	r3, [r3, #20]
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800243c:	431a      	orrs	r2, r3
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69db      	ldr	r3, [r3, #28]
 8002442:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002446:	431a      	orrs	r2, r3
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6a1b      	ldr	r3, [r3, #32]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	ea42 0103 	orr.w	r1, r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	430a      	orrs	r2, r1
 8002462:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	0c1a      	lsrs	r2, r3, #16
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f002 0204 	and.w	r2, r2, #4
 8002472:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002482:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2200      	movs	r2, #0
 8002488:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2201      	movs	r2, #1
 800248e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002492:	2300      	movs	r3, #0
}
 8002494:	4618      	mov	r0, r3
 8002496:	3708      	adds	r7, #8
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e041      	b.n	8002532 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d106      	bne.n	80024c8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f7fe fafe 	bl	8000ac4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	2202      	movs	r2, #2
 80024cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681a      	ldr	r2, [r3, #0]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3304      	adds	r3, #4
 80024d8:	4619      	mov	r1, r3
 80024da:	4610      	mov	r0, r2
 80024dc:	f000 f97c 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2201      	movs	r2, #1
 80024e4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	2201      	movs	r2, #1
 80024ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2201      	movs	r2, #1
 8002504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2201      	movs	r2, #1
 800250c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	2201      	movs	r2, #1
 800251c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2201      	movs	r2, #1
 800252c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002530:	2300      	movs	r3, #0
}
 8002532:	4618      	mov	r0, r3
 8002534:	3708      	adds	r7, #8
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}

0800253a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800253a:	b580      	push	{r7, lr}
 800253c:	b082      	sub	sp, #8
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e041      	b.n	80025d0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002552:	b2db      	uxtb	r3, r3
 8002554:	2b00      	cmp	r3, #0
 8002556:	d106      	bne.n	8002566 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2200      	movs	r2, #0
 800255c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f7fe fa91 	bl	8000a88 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	2202      	movs	r2, #2
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681a      	ldr	r2, [r3, #0]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	3304      	adds	r3, #4
 8002576:	4619      	mov	r1, r3
 8002578:	4610      	mov	r0, r2
 800257a:	f000 f92d 	bl	80027d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2201      	movs	r2, #1
 80025aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2201      	movs	r2, #1
 80025ba:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2201      	movs	r2, #1
 80025c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2201      	movs	r2, #1
 80025ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025ce:	2300      	movs	r3, #0
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3708      	adds	r7, #8
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	60f8      	str	r0, [r7, #12]
 80025e0:	60b9      	str	r1, [r7, #8]
 80025e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d101      	bne.n	80025f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80025ee:	2302      	movs	r3, #2
 80025f0:	e0ac      	b.n	800274c <HAL_TIM_PWM_ConfigChannel+0x174>
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	2201      	movs	r2, #1
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	2b0c      	cmp	r3, #12
 80025fe:	f200 809f 	bhi.w	8002740 <HAL_TIM_PWM_ConfigChannel+0x168>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	0800263d 	.word	0x0800263d
 800260c:	08002741 	.word	0x08002741
 8002610:	08002741 	.word	0x08002741
 8002614:	08002741 	.word	0x08002741
 8002618:	0800267d 	.word	0x0800267d
 800261c:	08002741 	.word	0x08002741
 8002620:	08002741 	.word	0x08002741
 8002624:	08002741 	.word	0x08002741
 8002628:	080026bf 	.word	0x080026bf
 800262c:	08002741 	.word	0x08002741
 8002630:	08002741 	.word	0x08002741
 8002634:	08002741 	.word	0x08002741
 8002638:	080026ff 	.word	0x080026ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68b9      	ldr	r1, [r7, #8]
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f92a 	bl	800289c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	699a      	ldr	r2, [r3, #24]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0208 	orr.w	r2, r2, #8
 8002656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	699a      	ldr	r2, [r3, #24]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f022 0204 	bic.w	r2, r2, #4
 8002666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	6999      	ldr	r1, [r3, #24]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	691a      	ldr	r2, [r3, #16]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	430a      	orrs	r2, r1
 8002678:	619a      	str	r2, [r3, #24]
      break;
 800267a:	e062      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68b9      	ldr	r1, [r7, #8]
 8002682:	4618      	mov	r0, r3
 8002684:	f000 f970 	bl	8002968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699a      	ldr	r2, [r3, #24]
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80026a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	6999      	ldr	r1, [r3, #24]
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	021a      	lsls	r2, r3, #8
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	430a      	orrs	r2, r1
 80026ba:	619a      	str	r2, [r3, #24]
      break;
 80026bc:	e041      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68b9      	ldr	r1, [r7, #8]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f9b9 	bl	8002a3c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	69da      	ldr	r2, [r3, #28]
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f042 0208 	orr.w	r2, r2, #8
 80026d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	69da      	ldr	r2, [r3, #28]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0204 	bic.w	r2, r2, #4
 80026e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	69d9      	ldr	r1, [r3, #28]
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	691a      	ldr	r2, [r3, #16]
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	430a      	orrs	r2, r1
 80026fa:	61da      	str	r2, [r3, #28]
      break;
 80026fc:	e021      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68b9      	ldr	r1, [r7, #8]
 8002704:	4618      	mov	r0, r3
 8002706:	f000 fa03 	bl	8002b10 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	69da      	ldr	r2, [r3, #28]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	69da      	ldr	r2, [r3, #28]
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69d9      	ldr	r1, [r3, #28]
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	021a      	lsls	r2, r3, #8
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	430a      	orrs	r2, r1
 800273c:	61da      	str	r2, [r3, #28]
      break;
 800273e:	e000      	b.n	8002742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8002740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	2200      	movs	r2, #0
 8002746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800274a:	2300      	movs	r3, #0
}
 800274c:	4618      	mov	r0, r3
 800274e:	3710      	adds	r7, #16
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
 800275c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002764:	2b01      	cmp	r3, #1
 8002766:	d101      	bne.n	800276c <HAL_TIM_SlaveConfigSynchro+0x18>
 8002768:	2302      	movs	r3, #2
 800276a:	e031      	b.n	80027d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800277c:	6839      	ldr	r1, [r7, #0]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 fa14 	bl	8002bac <TIM_SlaveTimer_SetConfig>
 8002784:	4603      	mov	r3, r0
 8002786:	2b00      	cmp	r3, #0
 8002788:	d009      	beq.n	800279e <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e018      	b.n	80027d0 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80027ac:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80027bc:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3708      	adds	r7, #8
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}

080027d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80027d8:	b480      	push	{r7}
 80027da:	b085      	sub	sp, #20
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
 80027e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	4a29      	ldr	r2, [pc, #164]	; (8002890 <TIM_Base_SetConfig+0xb8>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d00b      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f6:	d007      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	4a26      	ldr	r2, [pc, #152]	; (8002894 <TIM_Base_SetConfig+0xbc>)
 80027fc:	4293      	cmp	r3, r2
 80027fe:	d003      	beq.n	8002808 <TIM_Base_SetConfig+0x30>
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a25      	ldr	r2, [pc, #148]	; (8002898 <TIM_Base_SetConfig+0xc0>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d108      	bne.n	800281a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800280e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	4313      	orrs	r3, r2
 8002818:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a1c      	ldr	r2, [pc, #112]	; (8002890 <TIM_Base_SetConfig+0xb8>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d00b      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002828:	d007      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a19      	ldr	r2, [pc, #100]	; (8002894 <TIM_Base_SetConfig+0xbc>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d003      	beq.n	800283a <TIM_Base_SetConfig+0x62>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a18      	ldr	r2, [pc, #96]	; (8002898 <TIM_Base_SetConfig+0xc0>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d108      	bne.n	800284c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002840:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4313      	orrs	r3, r2
 800284a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	4313      	orrs	r3, r2
 8002858:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68fa      	ldr	r2, [r7, #12]
 800285e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	689a      	ldr	r2, [r3, #8]
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	4a07      	ldr	r2, [pc, #28]	; (8002890 <TIM_Base_SetConfig+0xb8>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d103      	bne.n	8002880 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	691a      	ldr	r2, [r3, #16]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	2201      	movs	r2, #1
 8002884:	615a      	str	r2, [r3, #20]
}
 8002886:	bf00      	nop
 8002888:	3714      	adds	r7, #20
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr
 8002890:	40012c00 	.word	0x40012c00
 8002894:	40000400 	.word	0x40000400
 8002898:	40000800 	.word	0x40000800

0800289c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800289c:	b480      	push	{r7}
 800289e:	b087      	sub	sp, #28
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6a1b      	ldr	r3, [r3, #32]
 80028aa:	f023 0201 	bic.w	r2, r3, #1
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6a1b      	ldr	r3, [r3, #32]
 80028b6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	699b      	ldr	r3, [r3, #24]
 80028c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f023 0303 	bic.w	r3, r3, #3
 80028d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	4313      	orrs	r3, r2
 80028dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 0302 	bic.w	r3, r3, #2
 80028e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	689b      	ldr	r3, [r3, #8]
 80028ea:	697a      	ldr	r2, [r7, #20]
 80028ec:	4313      	orrs	r3, r2
 80028ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a1c      	ldr	r2, [pc, #112]	; (8002964 <TIM_OC1_SetConfig+0xc8>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d10c      	bne.n	8002912 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	f023 0308 	bic.w	r3, r3, #8
 80028fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	68db      	ldr	r3, [r3, #12]
 8002904:	697a      	ldr	r2, [r7, #20]
 8002906:	4313      	orrs	r3, r2
 8002908:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	f023 0304 	bic.w	r3, r3, #4
 8002910:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <TIM_OC1_SetConfig+0xc8>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d111      	bne.n	800293e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002920:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002928:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	695b      	ldr	r3, [r3, #20]
 800292e:	693a      	ldr	r2, [r7, #16]
 8002930:	4313      	orrs	r3, r2
 8002932:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	699b      	ldr	r3, [r3, #24]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	68fa      	ldr	r2, [r7, #12]
 8002948:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	685a      	ldr	r2, [r3, #4]
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	697a      	ldr	r2, [r7, #20]
 8002956:	621a      	str	r2, [r3, #32]
}
 8002958:	bf00      	nop
 800295a:	371c      	adds	r7, #28
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40012c00 	.word	0x40012c00

08002968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002968:	b480      	push	{r7}
 800296a:	b087      	sub	sp, #28
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a1b      	ldr	r3, [r3, #32]
 8002982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	699b      	ldr	r3, [r3, #24]
 800298e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800299e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	021b      	lsls	r3, r3, #8
 80029a6:	68fa      	ldr	r2, [r7, #12]
 80029a8:	4313      	orrs	r3, r2
 80029aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f023 0320 	bic.w	r3, r3, #32
 80029b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	697a      	ldr	r2, [r7, #20]
 80029bc:	4313      	orrs	r3, r2
 80029be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a1d      	ldr	r2, [pc, #116]	; (8002a38 <TIM_OC2_SetConfig+0xd0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d10d      	bne.n	80029e4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80029ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	4313      	orrs	r3, r2
 80029da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80029e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a14      	ldr	r2, [pc, #80]	; (8002a38 <TIM_OC2_SetConfig+0xd0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d113      	bne.n	8002a14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80029f2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80029fa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	695b      	ldr	r3, [r3, #20]
 8002a00:	009b      	lsls	r3, r3, #2
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	4313      	orrs	r3, r2
 8002a06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	699b      	ldr	r3, [r3, #24]
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	693a      	ldr	r2, [r7, #16]
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	693a      	ldr	r2, [r7, #16]
 8002a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	68fa      	ldr	r2, [r7, #12]
 8002a1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	697a      	ldr	r2, [r7, #20]
 8002a2c:	621a      	str	r2, [r3, #32]
}
 8002a2e:	bf00      	nop
 8002a30:	371c      	adds	r7, #28
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bc80      	pop	{r7}
 8002a36:	4770      	bx	lr
 8002a38:	40012c00 	.word	0x40012c00

08002a3c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b087      	sub	sp, #28
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
 8002a44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0303 	bic.w	r3, r3, #3
 8002a72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	021b      	lsls	r3, r3, #8
 8002a8c:	697a      	ldr	r2, [r7, #20]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	4a1d      	ldr	r2, [pc, #116]	; (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d10d      	bne.n	8002ab6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002aa0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	021b      	lsls	r3, r3, #8
 8002aa8:	697a      	ldr	r2, [r7, #20]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a14      	ldr	r2, [pc, #80]	; (8002b0c <TIM_OC3_SetConfig+0xd0>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d113      	bne.n	8002ae6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ac4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002ac6:	693b      	ldr	r3, [r7, #16]
 8002ac8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002acc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	693a      	ldr	r2, [r7, #16]
 8002ad6:	4313      	orrs	r3, r2
 8002ad8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	699b      	ldr	r3, [r3, #24]
 8002ade:	011b      	lsls	r3, r3, #4
 8002ae0:	693a      	ldr	r2, [r7, #16]
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	693a      	ldr	r2, [r7, #16]
 8002aea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	68fa      	ldr	r2, [r7, #12]
 8002af0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	621a      	str	r2, [r3, #32]
}
 8002b00:	bf00      	nop
 8002b02:	371c      	adds	r7, #28
 8002b04:	46bd      	mov	sp, r7
 8002b06:	bc80      	pop	{r7}
 8002b08:	4770      	bx	lr
 8002b0a:	bf00      	nop
 8002b0c:	40012c00 	.word	0x40012c00

08002b10 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b087      	sub	sp, #28
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6a1b      	ldr	r3, [r3, #32]
 8002b1e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	685b      	ldr	r3, [r3, #4]
 8002b30:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	021b      	lsls	r3, r3, #8
 8002b4e:	68fa      	ldr	r2, [r7, #12]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002b5a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	031b      	lsls	r3, r3, #12
 8002b62:	693a      	ldr	r2, [r7, #16]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a0f      	ldr	r2, [pc, #60]	; (8002ba8 <TIM_OC4_SetConfig+0x98>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d109      	bne.n	8002b84 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b76:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	695b      	ldr	r3, [r3, #20]
 8002b7c:	019b      	lsls	r3, r3, #6
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	4313      	orrs	r3, r2
 8002b82:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	697a      	ldr	r2, [r7, #20]
 8002b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685a      	ldr	r2, [r3, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	693a      	ldr	r2, [r7, #16]
 8002b9c:	621a      	str	r2, [r3, #32]
}
 8002b9e:	bf00      	nop
 8002ba0:	371c      	adds	r7, #28
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bc80      	pop	{r7}
 8002ba6:	4770      	bx	lr
 8002ba8:	40012c00 	.word	0x40012c00

08002bac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b086      	sub	sp, #24
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
 8002bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bc4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	f023 0307 	bic.w	r3, r3, #7
 8002bd6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002bea:	683b      	ldr	r3, [r7, #0]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	2b30      	cmp	r3, #48	; 0x30
 8002bf0:	d05c      	beq.n	8002cac <TIM_SlaveTimer_SetConfig+0x100>
 8002bf2:	2b30      	cmp	r3, #48	; 0x30
 8002bf4:	d806      	bhi.n	8002c04 <TIM_SlaveTimer_SetConfig+0x58>
 8002bf6:	2b10      	cmp	r3, #16
 8002bf8:	d058      	beq.n	8002cac <TIM_SlaveTimer_SetConfig+0x100>
 8002bfa:	2b20      	cmp	r3, #32
 8002bfc:	d056      	beq.n	8002cac <TIM_SlaveTimer_SetConfig+0x100>
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d054      	beq.n	8002cac <TIM_SlaveTimer_SetConfig+0x100>
        assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
        break;
      }

    default:
      break;
 8002c02:	e054      	b.n	8002cae <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002c04:	2b50      	cmp	r3, #80	; 0x50
 8002c06:	d03d      	beq.n	8002c84 <TIM_SlaveTimer_SetConfig+0xd8>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d802      	bhi.n	8002c12 <TIM_SlaveTimer_SetConfig+0x66>
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d010      	beq.n	8002c32 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8002c10:	e04d      	b.n	8002cae <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8002c12:	2b60      	cmp	r3, #96	; 0x60
 8002c14:	d040      	beq.n	8002c98 <TIM_SlaveTimer_SetConfig+0xec>
 8002c16:	2b70      	cmp	r3, #112	; 0x70
 8002c18:	d000      	beq.n	8002c1c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 8002c1a:	e048      	b.n	8002cae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6818      	ldr	r0, [r3, #0]
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	68d9      	ldr	r1, [r3, #12]
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	689a      	ldr	r2, [r3, #8]
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	f000 f8a1 	bl	8002d72 <TIM_ETR_SetConfig>
      break;
 8002c30:	e03d      	b.n	8002cae <TIM_SlaveTimer_SetConfig+0x102>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	2b05      	cmp	r3, #5
 8002c38:	d101      	bne.n	8002c3e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e038      	b.n	8002cb0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	6a1b      	ldr	r3, [r3, #32]
 8002c44:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6a1a      	ldr	r2, [r3, #32]
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0201 	bic.w	r2, r2, #1
 8002c54:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	699b      	ldr	r3, [r3, #24]
 8002c5c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c64:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	68fa      	ldr	r2, [r7, #12]
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68fa      	ldr	r2, [r7, #12]
 8002c78:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	693a      	ldr	r2, [r7, #16]
 8002c80:	621a      	str	r2, [r3, #32]
      break;
 8002c82:	e014      	b.n	8002cae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6818      	ldr	r0, [r3, #0]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	6899      	ldr	r1, [r3, #8]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	461a      	mov	r2, r3
 8002c92:	f000 f811 	bl	8002cb8 <TIM_TI1_ConfigInputStage>
      break;
 8002c96:	e00a      	b.n	8002cae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	6818      	ldr	r0, [r3, #0]
 8002c9c:	683b      	ldr	r3, [r7, #0]
 8002c9e:	6899      	ldr	r1, [r3, #8]
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	f000 f835 	bl	8002d14 <TIM_TI2_ConfigInputStage>
      break;
 8002caa:	e000      	b.n	8002cae <TIM_SlaveTimer_SetConfig+0x102>
        break;
 8002cac:	bf00      	nop
  }
  return HAL_OK;
 8002cae:	2300      	movs	r3, #0
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3718      	adds	r7, #24
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b087      	sub	sp, #28
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	60f8      	str	r0, [r7, #12]
 8002cc0:	60b9      	str	r1, [r7, #8]
 8002cc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a1b      	ldr	r3, [r3, #32]
 8002cc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f023 0201 	bic.w	r2, r3, #1
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002cdc:	693b      	ldr	r3, [r7, #16]
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	011b      	lsls	r3, r3, #4
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f023 030a 	bic.w	r3, r3, #10
 8002cf4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cf6:	697a      	ldr	r2, [r7, #20]
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	697a      	ldr	r2, [r7, #20]
 8002d08:	621a      	str	r2, [r3, #32]
}
 8002d0a:	bf00      	nop
 8002d0c:	371c      	adds	r7, #28
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	bc80      	pop	{r7}
 8002d12:	4770      	bx	lr

08002d14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b087      	sub	sp, #28
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	60f8      	str	r0, [r7, #12]
 8002d1c:	60b9      	str	r1, [r7, #8]
 8002d1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6a1b      	ldr	r3, [r3, #32]
 8002d24:	f023 0210 	bic.w	r2, r3, #16
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	699b      	ldr	r3, [r3, #24]
 8002d30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	6a1b      	ldr	r3, [r3, #32]
 8002d36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002d38:	697b      	ldr	r3, [r7, #20]
 8002d3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002d3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	031b      	lsls	r3, r3, #12
 8002d44:	697a      	ldr	r2, [r7, #20]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	011b      	lsls	r3, r3, #4
 8002d56:	693a      	ldr	r2, [r7, #16]
 8002d58:	4313      	orrs	r3, r2
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	693a      	ldr	r2, [r7, #16]
 8002d66:	621a      	str	r2, [r3, #32]
}
 8002d68:	bf00      	nop
 8002d6a:	371c      	adds	r7, #28
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bc80      	pop	{r7}
 8002d70:	4770      	bx	lr

08002d72 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b087      	sub	sp, #28
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	60f8      	str	r0, [r7, #12]
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d8c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	021a      	lsls	r2, r3, #8
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	431a      	orrs	r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	697a      	ldr	r2, [r7, #20]
 8002da4:	609a      	str	r2, [r3, #8]
}
 8002da6:	bf00      	nop
 8002da8:	371c      	adds	r7, #28
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bc80      	pop	{r7}
 8002dae:	4770      	bx	lr

08002db0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d101      	bne.n	8002dc8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002dc4:	2302      	movs	r3, #2
 8002dc6:	e046      	b.n	8002e56 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002dee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	68fa      	ldr	r2, [r7, #12]
 8002df6:	4313      	orrs	r3, r2
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68fa      	ldr	r2, [r7, #12]
 8002e00:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a16      	ldr	r2, [pc, #88]	; (8002e60 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002e08:	4293      	cmp	r3, r2
 8002e0a:	d00e      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e14:	d009      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d004      	beq.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a10      	ldr	r2, [pc, #64]	; (8002e68 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d10c      	bne.n	8002e44 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	68ba      	ldr	r2, [r7, #8]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	68ba      	ldr	r2, [r7, #8]
 8002e42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	2200      	movs	r2, #0
 8002e50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	3714      	adds	r7, #20
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	bc80      	pop	{r7}
 8002e5e:	4770      	bx	lr
 8002e60:	40012c00 	.word	0x40012c00
 8002e64:	40000400 	.word	0x40000400
 8002e68:	40000800 	.word	0x40000800

08002e6c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
 8002e74:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8002e76:	2300      	movs	r3, #0
 8002e78:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d101      	bne.n	8002e88 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8002e84:	2302      	movs	r3, #2
 8002e86:	e03d      	b.n	8002f04 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	695b      	ldr	r3, [r3, #20]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	69db      	ldr	r3, [r3, #28]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	68fa      	ldr	r2, [r7, #12]
 8002ef8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f0e:	b580      	push	{r7, lr}
 8002f10:	b082      	sub	sp, #8
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e03f      	b.n	8002fa0 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f26:	b2db      	uxtb	r3, r3
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7fd fec3 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2224      	movs	r2, #36	; 0x24
 8002f3e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68da      	ldr	r2, [r3, #12]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f50:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 f828 	bl	8002fa8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	691a      	ldr	r2, [r3, #16]
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f66:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	695a      	ldr	r2, [r3, #20]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f76:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68da      	ldr	r2, [r3, #12]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f86:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2220      	movs	r2, #32
 8002f9a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f9e:	2300      	movs	r3, #0
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3708      	adds	r7, #8
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}

08002fa8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fa8:	b580      	push	{r7, lr}
 8002faa:	b084      	sub	sp, #16
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	691b      	ldr	r3, [r3, #16]
 8002fb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	689a      	ldr	r2, [r3, #8]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	695b      	ldr	r3, [r3, #20]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68db      	ldr	r3, [r3, #12]
 8002fde:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002fe2:	f023 030c 	bic.w	r3, r3, #12
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	68b9      	ldr	r1, [r7, #8]
 8002fec:	430b      	orrs	r3, r1
 8002fee:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	699a      	ldr	r2, [r3, #24]
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a2c      	ldr	r2, [pc, #176]	; (80030bc <UART_SetConfig+0x114>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d103      	bne.n	8003018 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003010:	f7ff f8d8 	bl	80021c4 <HAL_RCC_GetPCLK2Freq>
 8003014:	60f8      	str	r0, [r7, #12]
 8003016:	e002      	b.n	800301e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003018:	f7ff f8c0 	bl	800219c <HAL_RCC_GetPCLK1Freq>
 800301c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4613      	mov	r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	4413      	add	r3, r2
 8003026:	009a      	lsls	r2, r3, #2
 8003028:	441a      	add	r2, r3
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	fbb2 f3f3 	udiv	r3, r2, r3
 8003034:	4a22      	ldr	r2, [pc, #136]	; (80030c0 <UART_SetConfig+0x118>)
 8003036:	fba2 2303 	umull	r2, r3, r2, r3
 800303a:	095b      	lsrs	r3, r3, #5
 800303c:	0119      	lsls	r1, r3, #4
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	4613      	mov	r3, r2
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	4413      	add	r3, r2
 8003046:	009a      	lsls	r2, r3, #2
 8003048:	441a      	add	r2, r3
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	fbb2 f2f3 	udiv	r2, r2, r3
 8003054:	4b1a      	ldr	r3, [pc, #104]	; (80030c0 <UART_SetConfig+0x118>)
 8003056:	fba3 0302 	umull	r0, r3, r3, r2
 800305a:	095b      	lsrs	r3, r3, #5
 800305c:	2064      	movs	r0, #100	; 0x64
 800305e:	fb00 f303 	mul.w	r3, r0, r3
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	3332      	adds	r3, #50	; 0x32
 8003068:	4a15      	ldr	r2, [pc, #84]	; (80030c0 <UART_SetConfig+0x118>)
 800306a:	fba2 2303 	umull	r2, r3, r2, r3
 800306e:	095b      	lsrs	r3, r3, #5
 8003070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003074:	4419      	add	r1, r3
 8003076:	68fa      	ldr	r2, [r7, #12]
 8003078:	4613      	mov	r3, r2
 800307a:	009b      	lsls	r3, r3, #2
 800307c:	4413      	add	r3, r2
 800307e:	009a      	lsls	r2, r3, #2
 8003080:	441a      	add	r2, r3
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	fbb2 f2f3 	udiv	r2, r2, r3
 800308c:	4b0c      	ldr	r3, [pc, #48]	; (80030c0 <UART_SetConfig+0x118>)
 800308e:	fba3 0302 	umull	r0, r3, r3, r2
 8003092:	095b      	lsrs	r3, r3, #5
 8003094:	2064      	movs	r0, #100	; 0x64
 8003096:	fb00 f303 	mul.w	r3, r0, r3
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	011b      	lsls	r3, r3, #4
 800309e:	3332      	adds	r3, #50	; 0x32
 80030a0:	4a07      	ldr	r2, [pc, #28]	; (80030c0 <UART_SetConfig+0x118>)
 80030a2:	fba2 2303 	umull	r2, r3, r2, r3
 80030a6:	095b      	lsrs	r3, r3, #5
 80030a8:	f003 020f 	and.w	r2, r3, #15
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	440a      	add	r2, r1
 80030b2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80030b4:	bf00      	nop
 80030b6:	3710      	adds	r7, #16
 80030b8:	46bd      	mov	sp, r7
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	40013800 	.word	0x40013800
 80030c0:	51eb851f 	.word	0x51eb851f

080030c4 <__libc_init_array>:
 80030c4:	b570      	push	{r4, r5, r6, lr}
 80030c6:	2500      	movs	r5, #0
 80030c8:	4e0c      	ldr	r6, [pc, #48]	; (80030fc <__libc_init_array+0x38>)
 80030ca:	4c0d      	ldr	r4, [pc, #52]	; (8003100 <__libc_init_array+0x3c>)
 80030cc:	1ba4      	subs	r4, r4, r6
 80030ce:	10a4      	asrs	r4, r4, #2
 80030d0:	42a5      	cmp	r5, r4
 80030d2:	d109      	bne.n	80030e8 <__libc_init_array+0x24>
 80030d4:	f000 f822 	bl	800311c <_init>
 80030d8:	2500      	movs	r5, #0
 80030da:	4e0a      	ldr	r6, [pc, #40]	; (8003104 <__libc_init_array+0x40>)
 80030dc:	4c0a      	ldr	r4, [pc, #40]	; (8003108 <__libc_init_array+0x44>)
 80030de:	1ba4      	subs	r4, r4, r6
 80030e0:	10a4      	asrs	r4, r4, #2
 80030e2:	42a5      	cmp	r5, r4
 80030e4:	d105      	bne.n	80030f2 <__libc_init_array+0x2e>
 80030e6:	bd70      	pop	{r4, r5, r6, pc}
 80030e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030ec:	4798      	blx	r3
 80030ee:	3501      	adds	r5, #1
 80030f0:	e7ee      	b.n	80030d0 <__libc_init_array+0xc>
 80030f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030f6:	4798      	blx	r3
 80030f8:	3501      	adds	r5, #1
 80030fa:	e7f2      	b.n	80030e2 <__libc_init_array+0x1e>
 80030fc:	08003160 	.word	0x08003160
 8003100:	08003160 	.word	0x08003160
 8003104:	08003160 	.word	0x08003160
 8003108:	08003164 	.word	0x08003164

0800310c <memset>:
 800310c:	4603      	mov	r3, r0
 800310e:	4402      	add	r2, r0
 8003110:	4293      	cmp	r3, r2
 8003112:	d100      	bne.n	8003116 <memset+0xa>
 8003114:	4770      	bx	lr
 8003116:	f803 1b01 	strb.w	r1, [r3], #1
 800311a:	e7f9      	b.n	8003110 <memset+0x4>

0800311c <_init>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr

08003128 <_fini>:
 8003128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800312a:	bf00      	nop
 800312c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800312e:	bc08      	pop	{r3}
 8003130:	469e      	mov	lr, r3
 8003132:	4770      	bx	lr
